[
["index.html", "HEADS 2nd semester", " HEADS 2nd semester Bruno A Lima 2020-02-15 "],
["preface.html", "Preface", " Preface This is a book written in Markdown through RStudio. The bookdown package (Xie 2015) can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) In this book, I will try to compile all the homeworks from the 2nd semester 2019/2020 of HEADS PhD programme. An exhaustive explanation using the bookdown package (Xie 2019) can be found at bookdown: Authoring Books and Technical Documents with R Markdown and this is only a sample book, which was built on top of R Markdown and knitr This book is publish through NETLIFY as described by C.M. References "],
["intro.html", "1 Introduction", " 1 Introduction All the files and code of this book are available in the repository: https://github.com/balima78/HEADS2sem. All the students can contribute to this compilation sending me their own homeworks and correcting the mistakes I will certainly do. You can send me your files and code to balima78@gmail.com. When possible you must send me .Rmd files and data as .csv. Here, .Rmd files are named by number from 1000 to 9000 (CLLS - Class LLesson Student) followed by a breave description. You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 6. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter 2. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 1.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 1.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 1.1. knitr::kable( head(iris, 6), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 1.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2019) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["compstat.html", "2 COMPSTAT", " 2 COMPSTAT Estatística Computacional Conteúdos programáticos Estatística computacional Porque usar computação em estatística? Ferramentas e software para estatística computacional Estatística computacional utilizando grandes infra-estruturas de dados Sinopses de dados Estatísticas suficientes Histogramas Micro-Clusters Fading Statistics Estimativas de densidade Máxima verosimilhança Expectation-Maximization Kernel Estimation Estimativas e Simulação Métodos Jackknife Validação cruzada Geração de números aleatórios Métodos de Monte Carlo Métodos de Bootstrap Análise numérica Visualização de dados complexos Análise de componentes principais Bivariate smoothing Splines "],
["lesson-1.html", "2.1 Lesson 1", " 2.1 Lesson 1 2020-02-03 Exercises Solutions (just copied teacher’s solutions) Open the database Anesthesia-BD.csv data = read.csv(&quot;2.UploadedData/Anesthesia-BD.csv&quot;) ###load dat str(data) ###see data structure ## &#39;data.frame&#39;: 387 obs. of 9 variables: ## $ Subject : Factor w/ 387 levels &quot;Sbj001&quot;,&quot;Sbj002&quot;,..: 1 2 3 4 5 6 7 8 9 10 ... ## $ Gender : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 2 1 2 2 2 2 2 2 1 ... ## $ Age : int 50 67 71 51 69 78 70 58 80 63 ... ## $ TypeSurgery : Factor w/ 3 levels &quot;CAB&quot;,&quot;CAB + Valve&quot;,..: 3 1 1 3 1 2 1 3 3 2 ... ## $ SurgStatus : Factor w/ 2 levels &quot;Elective&quot;,&quot;Urgent&quot;: 1 1 2 1 2 2 1 2 1 2 ... ## $ Diastolic : num 45.5 52.6 56.7 71.4 58.1 ... ## $ Systolic : num 112.1 109 98.2 150.8 131.5 ... ## $ Cross_Clamp_Time: int 83 67 83 51 63 114 94 138 42 172 ... ## $ AdvEvent : int 0 0 0 0 1 0 0 0 0 0 ... Factor variable AdvEvent data$AdvEvent &lt;- factor(data$AdvEvent, levels = c(0,1),labels=c(&quot;No&quot;,&quot;Yes&quot;)) For the columns which contain numeric values, create a new summary table in which the rows are the mean, the standard deviation, and the median of each of the numeric columns. T &lt;- sapply(data[,sapply(data,is.numeric)],function(x){ return(rbind(mean(x,na.rm = T),sd(x,na.rm = T),median(x,na.rm = T))) } ) rownames(T) = c(&quot;Mean&quot;,&quot;SD&quot;,&quot;Median&quot;) T ## Age Diastolic Systolic Cross_Clamp_Time ## Mean 67.27390 60.93076 132.04705 72.00521 ## SD 11.25574 11.35387 21.22864 32.04680 ## Median 67.00000 60.52591 130.00410 67.00000 Considering only the subjects who had CAB or Valve surgery, how many had adverse events? How many males and females in the two groups (having or not having adverse events)? (count and percentage) # create an index with the observation that comply with the conditions ind = which(data$TypeSurgery==&quot;CAB&quot; | data$TypeSurgery==&quot;Valve&quot; ) # table these data counts table(data[ind,&quot;AdvEvent&quot;]) ## ## No Yes ## 231 80 # and frequencies prop.table(table(data[ind,&quot;AdvEvent&quot;])) ## ## No Yes ## 0.7427653 0.2572347 # now by gender table(data[ind,&quot;Gender&quot;],data[ind,&quot;AdvEvent&quot;]) ## ## No Yes ## Female 60 21 ## Male 171 59 # and their frequencies prop.table(table(data[ind,&quot;Gender&quot;],data[ind,&quot;AdvEvent&quot;])) ## ## No Yes ## Female 0.19292605 0.06752412 ## Male 0.54983923 0.18971061 4.Merge the two datasets (Anesthesia-BD.csv and Anesthesia-BD2.csv) by the subject identification number. data2 = read.csv(&quot;2.UploadedData/Anesthesia-BD2.csv&quot;) ###load data Anesthesia-BD2.csv # I had to rename the first column, I don&#39;t know why names(data2)[1]&lt;-&quot;SubjectID&quot; str(data2) ## &#39;data.frame&#39;: 363 obs. of 7 variables: ## $ SubjectID : Factor w/ 363 levels &quot;Sbj001&quot;,&quot;Sbj002&quot;,..: 3 25 30 32 36 39 46 56 60 63 ... ## $ Diabetes : int 0 0 1 1 0 0 0 1 0 0 ... ## $ RFLastA1cLevel : num 5.7 5.6 7.1 6.7 6.7 6.3 6 6.5 5.3 4.9 ... ## $ ChronicLungDisease: Factor w/ 4 levels &quot;Mild&quot;,&quot;Moderate&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ Hypertension : int 1 1 1 1 1 1 1 1 1 1 ... ## $ CHF : int 0 1 1 1 1 1 1 0 1 1 ... ## $ Euroscore : Factor w/ 330 levels &quot;#N/A&quot;,&quot;0.501743134&quot;,..: 8 64 4 92 249 36 195 125 214 224 ... The merge must be such that only the common subjects should be present in the final database (natural join). Ma = merge(data,data2,by.x = &quot;Subject&quot;,by.y=&quot;SubjectID&quot;,all = F) dim(Ma) ## [1] 363 15 The merge must be such that if some subject is not in one of the databases, the subject should be in the database, and missing information must be not available (full outer join). Mb = merge(data,data2,by.x = &quot;Subject&quot;,by.y=&quot;SubjectID&quot;,all = T) dim(Mb) ## [1] 387 15 Consider the following statement: “For people without diabetes, the normal range for the hemoglobin A1c level is between 4% and 5.6%. Hemoglobin A1c levels between 5.7% and 6.4% mean you have a higher chance of getting diabetes. Levels of 6.5% or higher mean you have diabetes.” Create a new variable with three factors (normal, prediabetes, and diabetes), taking into consideration the values the A1c levels. Compare the results obtained with the variable Diabetes (assuming that 1 means to have diabetes and 0 no diabetes). diab &lt;- ifelse(Mb$RFLastA1cLevel&lt;5.7,0,ifelse(Mb$RFLastA1cLevel&lt;6.4,1,2)) Mb$Diabetes2 &lt;- factor(x = diab, levels = 0:2, labels =c(&quot;Normal&quot;,&quot;PreDiabetes&quot;,&quot;Diabetes&quot;)) Mb$Diabetes &lt;- factor(Mb$Diabetes, levels=0:1, labels=c(&quot;Normal&quot;,&quot;Diabetes&quot;)) table(Mb$Diabetes,Mb$Diabetes2) ## ## Normal PreDiabetes Diabetes ## Normal 120 99 11 ## Diabetes 7 35 83 Create a table with the comparison between the groups having or not having adverse events for all the variables available in the combined database. Use the appropriate measures for each type of variable. str(Mb) ## &#39;data.frame&#39;: 387 obs. of 16 variables: ## $ Subject : Factor w/ 387 levels &quot;Sbj001&quot;,&quot;Sbj002&quot;,..: 1 2 3 4 5 6 7 8 9 10 ... ## $ Gender : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 2 1 2 2 2 2 2 2 1 ... ## $ Age : int 50 67 71 51 69 78 70 58 80 63 ... ## $ TypeSurgery : Factor w/ 3 levels &quot;CAB&quot;,&quot;CAB + Valve&quot;,..: 3 1 1 3 1 2 1 3 3 2 ... ## $ SurgStatus : Factor w/ 2 levels &quot;Elective&quot;,&quot;Urgent&quot;: 1 1 2 1 2 2 1 2 1 2 ... ## $ Diastolic : num 45.5 52.6 56.7 71.4 58.1 ... ## $ Systolic : num 112.1 109 98.2 150.8 131.5 ... ## $ Cross_Clamp_Time : int 83 67 83 51 63 114 94 138 42 172 ... ## $ AdvEvent : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 1 1 1 1 2 1 1 1 1 1 ... ## $ Diabetes : Factor w/ 2 levels &quot;Normal&quot;,&quot;Diabetes&quot;: 2 1 1 1 1 1 1 1 1 2 ... ## $ RFLastA1cLevel : num 7.9 5.5 5.7 6 5.8 NA 5.9 6 5.2 11.2 ... ## $ ChronicLungDisease: Factor w/ 4 levels &quot;Mild&quot;,&quot;Moderate&quot;,..: 3 3 1 3 3 3 3 3 3 3 ... ## $ Hypertension : int 1 1 1 0 1 0 1 1 1 0 ... ## $ CHF : int 1 0 0 0 0 1 1 1 1 1 ... ## $ Euroscore : Factor w/ 330 levels &quot;#N/A&quot;,&quot;0.501743134&quot;,..: 47 206 8 289 159 96 119 98 77 4 ... ## $ Diabetes2 : Factor w/ 3 levels &quot;Normal&quot;,&quot;PreDiabetes&quot;,..: 3 1 2 2 2 NA 2 2 1 3 ... Mb$Hypertension &lt;- factor(Mb$Hypertension, levels=0:1, labels=c(&quot;No&quot;,&quot;Yes&quot;)) Mb$CHF &lt;- factor(Mb$CHF, levels=0:1, labels=c(&quot;No&quot;,&quot;Yes&quot;)) Mb$Subject &lt;- as.character(Mb$Subject) #windows() par(mfrow=c(2,3)) for (i in which(sapply(Mb,is.numeric))){ hist(Mb[,i],xlab=colnames(Mb)[i]) } par(mfrow=c(1,1)) table &lt;- by(Mb[,which(sapply(Mb,is.numeric))], INDICES = Mb$AdvEvent, FUN = function(x) apply(x,2,quantile,na.rm=T)) table ## Mb$AdvEvent: No ## Age Diastolic Systolic Cross_Clamp_Time RFLastA1cLevel ## 0% 25 26.42047 88.70903 15 4.7 ## 25% 59 53.30694 115.03977 51 5.6 ## 50% 67 60.75382 129.50300 68 5.8 ## 75% 76 68.64874 143.12238 83 6.4 ## 100% 92 94.35495 180.95547 241 12.2 ## -------------------------------------------------------- ## Mb$AdvEvent: Yes ## Age Diastolic Systolic Cross_Clamp_Time RFLastA1cLevel ## 0% 24 39.42266 92.34727 13.0 4.600 ## 25% 62 52.93295 119.55877 48.0 5.500 ## 50% 69 59.94571 131.48461 64.0 5.800 ## 75% 77 65.97349 153.50990 88.5 6.425 ## 100% 88 92.51766 193.75080 298.0 11.700 table$pvalue &lt;- apply(Mb[,which(sapply(Mb,is.numeric))],2, function(x) wilcox.test(x[which(Mb$AdvEvent==&quot;No&quot;)],x[which(Mb$AdvEvent==&quot;Yes&quot;)])$p.value) table ## Age Diastolic Systolic Cross_Clamp_Time RFLastA1cLevel ## 0% 25 26.42047 88.70903 15 4.7 ## 25% 59 53.30694 115.03977 51 5.6 ## 50% 67 60.75382 129.50300 68 5.8 ## 75% 76 68.64874 143.12238 83 6.4 ## 100% 92 94.35495 180.95547 241 12.2 ## -------------------------------------------------------- ## Age Diastolic Systolic Cross_Clamp_Time RFLastA1cLevel ## 0% 24 39.42266 92.34727 13.0 4.600 ## 25% 62 52.93295 119.55877 48.0 5.500 ## 50% 69 59.94571 131.48461 64.0 5.800 ## 75% 77 65.97349 153.50990 88.5 6.425 ## 100% 88 92.51766 193.75080 298.0 11.700 ## -------------------------------------------------------- ## Age Diastolic Systolic Cross_Clamp_Time ## 0.09297764 0.41375034 0.09079886 0.76575185 ## RFLastA1cLevel ## 0.78804579 Mb$Euroscore&lt;-as.character(Mb$Euroscore) table2 &lt;- by(Mb[,which(sapply(Mb,is.factor))], INDICES = Mb$AdvEvent, FUN = function(x){sapply(x,table)}) table2 ## Mb$AdvEvent: No ## $Gender ## ## Female Male ## 78 200 ## ## $TypeSurgery ## ## CAB CAB + Valve Valve ## 156 47 75 ## ## $SurgStatus ## ## Elective Urgent ## 148 130 ## ## $AdvEvent ## ## No Yes ## 278 0 ## ## $Diabetes ## ## Normal Diabetes ## 170 93 ## ## $ChronicLungDisease ## ## Mild Moderate No Severe ## 34 4 226 1 ## ## $Hypertension ## ## No Yes ## 49 215 ## ## $CHF ## ## No Yes ## 186 79 ## ## $Diabetes2 ## ## Normal PreDiabetes Diabetes ## 91 100 70 ## ## -------------------------------------------------------- ## Mb$AdvEvent: Yes ## $Gender ## ## Female Male ## 31 78 ## ## $TypeSurgery ## ## CAB CAB + Valve Valve ## 41 29 39 ## ## $SurgStatus ## ## Elective Urgent ## 64 45 ## ## $AdvEvent ## ## No Yes ## 0 109 ## ## $Diabetes ## ## Normal Diabetes ## 65 33 ## ## $ChronicLungDisease ## ## Mild Moderate No Severe ## 16 0 79 3 ## ## $Hypertension ## ## No Yes ## 20 78 ## ## $CHF ## ## No Yes ## 50 47 ## ## $Diabetes2 ## ## Normal PreDiabetes Diabetes ## 36 35 25 "],
["lesson-2.html", "2.2 Lesson 2", " 2.2 Lesson 2 2020-02-10 Classe Exercises (code given by the professor) library(stream) ## Loading required package: proxy ## ## Attaching package: &#39;proxy&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## as.dist, dist ## The following object is masked from &#39;package:base&#39;: ## ## as.matrix #par(mfrow=c(2,2)) keep sample mean definitions itera &lt;- 2000 lbound &lt;- -3 ubound &lt;- 8 mu1 &lt;- 0 mu2 &lt;- 5 set.seed(523) stream1 &lt;- DSD_Gaussians(k=1, d=1, mu=0, sigma=2) stream2 &lt;- DSD_Gaussians(k=1, d=1, mu=10, sigma=2) iteration # initialization n &lt;- sum &lt;- 0 plot(NULL, xlab=&quot;Iteration&quot;,ylab=&quot;Value&quot;, xlim=c(0,itera), ylim=c(-3,13), main=&quot;Sample Mean&quot;) # iterative step for (i in 1:itera){ xi &lt;- ifelse(i&lt;=1000, get_points(stream1)[1,1], get_points(stream2)[1,1]) sum &lt;- sum + xi n &lt;- n + 1 points(x=i, y=xi, pch=20, cex=.1, col=&quot;black&quot;) points(x=i, y=sum / n, pch=20, cex=.5, col=&quot;red&quot;) } keep sample mean over a sliding window definitions w &lt;- 100 set.seed(523) stream1 &lt;- DSD_Gaussians(k=1, d=1, mu=0, sigma=2) stream2 &lt;- DSD_Gaussians(k=1, d=1, mu=10, sigma=2) iteration # initialization n &lt;- sum &lt;- 0 plot(NULL, xlab=&quot;Iteration&quot;,ylab=&quot;Value&quot;, xlim=c(0,itera), ylim=c(-3,13), main=&quot;Sliding Mean&quot;) window &lt;- NULL # iterative step for (i in 1:itera){ xi &lt;- ifelse(i&lt;=1000, get_points(stream1)[1,1], get_points(stream2)[1,1]) sum &lt;- sum + xi n &lt;- n + 1 window &lt;- c(window, xi) if (length(window) &gt; w) { sum &lt;- sum - window[1] n &lt;- n - 1 window &lt;- window[-1] } points(x=i, y=xi, pch=20, cex=.1, col=&quot;black&quot;) points(x=i, y=sum / n, pch=20, cex=.5, col=&quot;red&quot;) } keep sample mean over a alpha weighted sliding window definitions w &lt;- 100 eps &lt;- 0.05 alpha &lt;- eps^(1/w) set.seed(523) stream1 &lt;- DSD_Gaussians(k=1, d=1, mu=0, sigma=2) stream2 &lt;- DSD_Gaussians(k=1, d=1, mu=10, sigma=2) iteration # initialization n &lt;- sum &lt;- 0 plot(NULL, xlab=&quot;Iteration&quot;,ylab=&quot;Value&quot;, xlim=c(0,itera), ylim=c(-3,13), main=&quot;Weighted Sliding Mean&quot;) window &lt;- NULL # iterative step for (i in 1:itera){ xi &lt;- ifelse(i&lt;=1000, get_points(stream1)[1,1], get_points(stream2)[1,1]) sum &lt;- sum * alpha + xi n &lt;- n * alpha + 1 window &lt;- c(window, xi) if (length(window) &gt; w) { sum &lt;- sum - window[1] * alpha ^ (w-1) n &lt;- n - 1 * alpha ^ (w-1) window &lt;- window[-1] } points(x=i, y=xi, pch=20, cex=.1, col=&quot;black&quot;) points(x=i, y=sum / n, pch=20, cex=.5, col=&quot;red&quot;) } keep sample mean over a alpha fading sliding window definitions w &lt;- 100 eps &lt;- 0.05 alpha &lt;- eps^(1/w) set.seed(523) stream1 &lt;- DSD_Gaussians(k=1, d=1, mu=0, sigma=2) stream2 &lt;- DSD_Gaussians(k=1, d=1, mu=10, sigma=2) iteration # initialization n &lt;- sum &lt;- 0 plot(NULL, xlab=&quot;Iteration&quot;,ylab=&quot;Value&quot;, xlim=c(0,itera), ylim=c(-3,13), main=&quot;Fading Sliding Mean&quot;) window &lt;- NULL # iterative step for (i in 1:itera){ xi &lt;- ifelse(i&lt;=1000, get_points(stream1)[1,1], get_points(stream2)[1,1]) sum &lt;- sum * alpha + xi n &lt;- n * alpha + 1 points(x=i, y=xi, pch=20, cex=.1, col=&quot;black&quot;) points(x=i, y=sum / n, pch=20, cex=.5, col=&quot;red&quot;) } "],
["assignment-histogram.html", "2.3 assignment Histogram", " 2.3 assignment Histogram lesson 2 (cont.) professor’s solution 2020-02-13 Using the stream package in R, keep current sample histogram of a 1-dimensional data stream using different window models. keep sample histogram defenitions library(stream) #par(mfrow=c(2,2)) # definitions itera &lt;- 2000 lbound &lt;- -3 ubound &lt;- 8 nbins &lt;- 10 mu1 &lt;- 0 mu2 &lt;- 5 iteration # initialization set.seed(523) stream1 &lt;- DSD_Gaussians(k=1, d=1, mu=mu1, sigma=2) stream2 &lt;- DSD_Gaussians(k=1, d=1, mu=mu2, sigma=2) splits &lt;- seq(from=lbound, to=ubound, by=(ubound-lbound)/nbins) splits &lt;- c(splits, +Inf) # extra split for comparison bins &lt;- rep(0, length(splits)) names(bins) &lt;- paste(&quot;&lt;=&quot;,splits,sep=&quot;&quot;) plot(NULL, xlab=&quot;Iteration&quot;,ylab=&quot;Value&quot;, xlim=c(0,itera), ylim=c(lbound,ubound), main=&quot;Sample Distribution Heat Map&quot;) cat(&quot;\\n*************************\\n&quot;, &quot;Sample Distribution&quot;,&quot;\\n&quot;) ## ## ************************* ## Sample Distribution # iterative step for (i in 1:itera){ xi &lt;- ifelse(i&lt;=1000, get_points(stream1)[1,1], get_points(stream2)[1,1]) bin &lt;- which(xi &lt;= splits)[1] bins[bin] &lt;- bins[bin] + 1 sapply(2:(length(splits)-1), function(u){ upper &lt;- splits[u] lower &lt;- splits[u-1] lines(x=c(i,i), y=c(lower,upper), lwd=2, col=gray(1 - bins[u] / sum(bins))) }) if (i %% 500 == 0){ cat(&quot;\\n ### Iteration&quot;,i, &quot;\\n&quot;) print(bins) } } ## ## ### Iteration 500 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 &lt;=2.5 &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 ## 13 43 90 141 137 66 9 1 0 0 ## &lt;=8 &lt;=Inf ## 0 0 ## ## ### Iteration 1000 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 &lt;=2.5 &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 ## 19 64 184 311 279 123 18 2 0 0 ## &lt;=8 &lt;=Inf ## 0 0 ## ## ### Iteration 1500 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 &lt;=2.5 &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 ## 19 65 184 311 281 142 73 135 158 85 ## &lt;=8 &lt;=Inf ## 36 11 ## ## ### Iteration 2000 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 &lt;=2.5 &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 ## 19 65 184 311 284 159 121 262 309 198 ## &lt;=8 &lt;=Inf ## 71 17 keep sample histogram over a sliding window definitions and iteration # definitions w &lt;- 500 # initialization set.seed(523) stream1 &lt;- DSD_Gaussians(k=1, d=1, mu=mu1, sigma=2) stream2 &lt;- DSD_Gaussians(k=1, d=1, mu=mu2, sigma=2) splits &lt;- seq(from=lbound, to=ubound, by=(ubound-lbound)/nbins) splits &lt;- c(splits, +Inf) # extra split for comparison bins &lt;- rep(0, length(splits)) names(bins) &lt;- paste(&quot;&lt;=&quot;,splits,sep=&quot;&quot;) window &lt;- NULL plot(NULL, xlab=&quot;Iteration&quot;,ylab=&quot;Value&quot;, xlim=c(0,itera), ylim=c(lbound,ubound), main=&quot;Sliding Distribution Heat Map&quot;) cat(&quot;\\n*************************\\n&quot;, &quot;Sliding Distribution&quot;,&quot;\\n&quot;) ## ## ************************* ## Sliding Distribution # iterative step for (i in 1:itera){ xi &lt;- ifelse(i&lt;=1000, get_points(stream1)[1,1], get_points(stream2)[1,1]) bin &lt;- which(xi &lt;= splits)[1] bins[bin] &lt;- bins[bin] + 1 window &lt;- c(window, xi) if (length(window) &gt; w) { oldbin &lt;- which(window[1] &lt;= splits)[1] bins[oldbin] &lt;- bins[oldbin] - 1 window &lt;- window[-1] } sapply(2:(length(splits)-1), function(u){ upper &lt;- splits[u] lower &lt;- splits[u-1] lines(x=c(i,i), y=c(lower,upper), lwd=2, col=gray(1 - bins[u] / sum(bins))) }) if (i %% 500 == 0){ cat(&quot;\\n ### Iteration&quot;,i, &quot;\\n&quot;) print(bins) } } ## ## ### Iteration 500 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 &lt;=2.5 &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 ## 13 43 90 141 137 66 9 1 0 0 ## &lt;=8 &lt;=Inf ## 0 0 ## ## ### Iteration 1000 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 &lt;=2.5 &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 ## 6 21 94 170 142 57 9 1 0 0 ## &lt;=8 &lt;=Inf ## 0 0 ## ## ### Iteration 1500 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 &lt;=2.5 &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 ## 0 1 0 0 2 19 55 133 158 85 ## &lt;=8 &lt;=Inf ## 36 11 ## ## ### Iteration 2000 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 &lt;=2.5 &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 ## 0 0 0 0 3 17 48 127 151 113 ## &lt;=8 &lt;=Inf ## 35 6 keep sample histogram over a alpha weighted sliding window definitions w &lt;- 500 eps &lt;- 0.05 alpha &lt;- eps^(1/w) iteration # initialization set.seed(523) stream1 &lt;- DSD_Gaussians(k=1, d=1, mu=mu1, sigma=2) stream2 &lt;- DSD_Gaussians(k=1, d=1, mu=mu2, sigma=2) splits &lt;- seq(from=lbound, to=ubound, by=(ubound-lbound)/nbins) splits &lt;- c(splits, +Inf) # extra split for comparison bins &lt;- rep(0, length(splits)) names(bins) &lt;- paste(&quot;&lt;=&quot;,splits,sep=&quot;&quot;) window &lt;- NULL plot(NULL, xlab=&quot;Iteration&quot;,ylab=&quot;Value&quot;, xlim=c(0,itera), ylim=c(lbound,ubound), main=&quot;Weighted Distribution Heat Map&quot;) cat(&quot;\\n*************************\\n&quot;, &quot;Weighted Distribution&quot;,&quot;\\n&quot;) ## ## ************************* ## Weighted Distribution # iterative step for (i in 1:itera){ xi &lt;- ifelse(i&lt;=1000, get_points(stream1)[1,1], get_points(stream2)[1,1]) bin &lt;- which(xi &lt;= splits)[1] bins &lt;- bins * alpha bins[bin] &lt;- bins[bin] + 1 window &lt;- c(window, xi) if (length(window) &gt; w) { oldbin &lt;- which(window[1] &lt;= splits)[1] bins[oldbin] &lt;- bins[oldbin] - alpha^w window &lt;- window[-1] } sapply(2:(length(splits)-1), function(u){ upper &lt;- splits[u] lower &lt;- splits[u-1] lines(x=c(i,i), y=c(lower,upper), lwd=2, col=gray(1 - bins[u] / sum(bins))) }) if (i %% 500 == 0){ cat(&quot;\\n ### Iteration&quot;,i, &quot;\\n&quot;) print(bins) } } ## ## ### Iteration 500 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 &lt;=2.5 ## 3.2949751 16.9824961 29.3163498 44.6117439 41.4464742 19.9554876 ## &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 &lt;=8 &lt;=Inf ## 3.2883843 0.1384587 0.0000000 0.0000000 0.0000000 0.0000000 ## ## ### Iteration 1000 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 &lt;=2.5 ## 1.8919283 5.7544636 34.7204532 49.2432118 47.7857598 15.7306842 ## &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 &lt;=8 &lt;=Inf ## 3.7872339 0.1206349 0.0000000 0.0000000 0.0000000 0.0000000 ## ## ### Iteration 1500 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 ## 2.536993e-17 1.959926e-01 -2.532696e-15 3.832639e-15 5.080926e-01 ## &lt;=2.5 &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 ## 7.867248e+00 1.678585e+01 3.859057e+01 5.039598e+01 2.697502e+01 ## &lt;=8 &lt;=Inf ## 1.327758e+01 4.438031e+00 ## ## ### Iteration 2000 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 ## 1.268497e-18 -1.087978e-17 -1.266348e-16 1.916320e-16 6.979810e-01 ## &lt;=2.5 &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 ## 5.225829e+00 1.513803e+01 4.131708e+01 5.152468e+01 3.188672e+01 ## &lt;=8 &lt;=Inf ## 1.020274e+01 3.041313e+00 keep sample histogram over a alpha fading window definitions w &lt;- 500 eps &lt;- 0.05 alpha &lt;- eps^(1/w) iteration # initialization set.seed(523) stream1 &lt;- DSD_Gaussians(k=1, d=1, mu=mu1, sigma=2) stream2 &lt;- DSD_Gaussians(k=1, d=1, mu=mu2, sigma=2) splits &lt;- seq(from=lbound, to=ubound, by=(ubound-lbound)/nbins) splits &lt;- c(splits, +Inf) # extra split for comparison bins &lt;- rep(0, length(splits)) names(bins) &lt;- paste(&quot;&lt;=&quot;,splits,sep=&quot;&quot;) plot(NULL, xlab=&quot;Iteration&quot;,ylab=&quot;Value&quot;, xlim=c(0,itera), ylim=c(lbound,ubound), main=&quot;Fading Distribution Heat Map&quot;) cat(&quot;\\n*************************\\n&quot;, &quot;Fading Distribution&quot;,&quot;\\n&quot;) ## ## ************************* ## Fading Distribution # iterative step for (i in 1:itera){ xi &lt;- ifelse(i&lt;=1000, get_points(stream1)[1,1], get_points(stream2)[1,1]) bin &lt;- which(xi &lt;= splits)[1] bins &lt;- bins * alpha bins[bin] &lt;- bins[bin] + 1 sapply(2:(length(splits)-1), function(u){ upper &lt;- splits[u] lower &lt;- splits[u-1] lines(x=c(i,i), y=c(lower,upper), lwd=2, col=gray(1 - bins[u] / sum(bins))) }) if (i %% 500 == 0){ cat(&quot;\\n ### Iteration&quot;,i, &quot;\\n&quot;) print(bins) } } ## ## ### Iteration 500 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 &lt;=2.5 ## 3.2949751 16.9824961 29.3163498 44.6117439 41.4464742 19.9554876 ## &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 &lt;=8 &lt;=Inf ## 3.2883843 0.1384587 0.0000000 0.0000000 0.0000000 0.0000000 ## ## ### Iteration 1000 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 &lt;=2.5 ## 2.0566770 6.6035884 36.1862707 51.4737990 49.8580835 16.7284586 ## &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 &lt;=8 &lt;=Inf ## 3.9516531 0.1275578 0.0000000 0.0000000 0.0000000 0.0000000 ## ## ### Iteration 1500 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 &lt;=2.5 ## 0.1028339 0.5261720 1.8093135 2.5736899 3.0009968 8.7036712 ## &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 &lt;=8 &lt;=Inf ## 16.9834370 38.5969517 50.3959783 26.9750167 13.2775825 4.4380306 ## ## ### Iteration 2000 ## &lt;=-3 &lt;=-1.9 &lt;=-0.8 &lt;=0.3 &lt;=1.4 ## 0.005141693 0.026308601 0.090465677 0.128684497 0.848030834 ## &lt;=2.5 &lt;=3.6 &lt;=4.7 &lt;=5.8 &lt;=6.9 ## 5.661012898 15.987200946 43.246924516 54.044482016 33.235467534 ## &lt;=8 &lt;=Inf ## 10.866619313 3.263214833 "],
["assignment-matrix.html", "2.4 assignment Matrix", " 2.4 assignment Matrix Assignment 1 (deadline Feb 17) 2020-02-15 Using R, keep counters of equal-width grid-cells (base counters for micro-cluster definitions) of a 2-dimensional continuous data stream using different window models (landmark, sliding, weighted, fading). The code should work with an evolving stream from a single record of the PhysioNet Challenge https://physionetchallenges.github.io/2020/ This training set consists of 6,877 (male: 3,699; female: 3,178) 12-ECG recordings lasting from 6 seconds to 60 seconds. Each recording was sampled at 500 Hz. All data is provided in WFDB format with a MATLAB v4 file and a header containing patient sex, age, and diagnosis (Dx) information at the end of the header file. The code should be applicable to one 12-dimensional record file. library(stream) library(R.matlab) ## R.matlab v3.6.2 (2018-09-26) successfully loaded. See ?R.matlab for help. ## ## Attaching package: &#39;R.matlab&#39; ## The following object is masked from &#39;package:stream&#39;: ## ## evaluate ## The following objects are masked from &#39;package:base&#39;: ## ## getOption, isOpen # after unzip the files, I took the first file fA1&lt;-readMat(&quot;2.UploadedData/A0001.mat&quot;)$val fA1&lt;-t(fA1) I selected two columns (4 and 5) corresponding to the readings and make the streams # select columns a&lt;-4 b&lt;-5 # data stream strA1&lt;-DSD_Memory(fA1[,c(a,b)], loop = T) definitions set.seed(1) reset_stream(strA1) # number of iterations itera &lt;- 2000 #defining bounds for matrix lbound &lt;- min(strA1[[2]]) ubound &lt;- max(strA1[[2]]) nbins &lt;- 10 # first we create two equal size vectors splits &lt;- seq(from=lbound, to=ubound, by=(ubound-lbound)/nbins) splits &lt;- c(splits)[-1] # drop first value binsA &lt;- rep(0, length(splits)) names(binsA) &lt;- paste(&quot;&lt;=&quot;,splits,sep=&quot;&quot;) binsB &lt;- rep(0, length(splits)) names(binsB) &lt;- paste(&quot;&lt;=&quot;,splits,sep=&quot;&quot;) # and then a matrix 10x10 mx&lt;-matrix(0,10,10) rownames(mx)&lt;-colnames(mx)&lt;-names(binsA) 2.4.1 keep sample matrix iteration # iterative step for (i in 1:itera){ ai &lt;- get_points(strA1)[1,1] bi &lt;- get_points(strA1)[1,2] binA &lt;- which(ai &lt;= splits)[1] binsA[binA] &lt;- binsA[binA] + 1 binB &lt;- which(bi &lt;= splits)[1] binsB[binB] &lt;- binsB[binB] + 1 mx[binA,binB]&lt;-mx[binA,binB] + 1 # with the vectors positions, we update the matrix counts # printing the two vectors just for control if (i %% 500 == 0){ cat(&quot;\\n ### Iteration&quot;,i, &quot;\\n&quot;) print(binsA) print(binsB) } } ## ## ### Iteration 500 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 55 53 117 186 26 12 22 11 ## &lt;=464.6 &lt;=547 ## 8 10 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 28 24 65 268 90 14 9 2 ## &lt;=464.6 &lt;=547 ## 0 0 ## ## ### Iteration 1000 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 102 96 225 362 89 28 42 19 ## &lt;=464.6 &lt;=547 ## 18 19 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 63 41 133 555 158 26 19 5 ## &lt;=464.6 &lt;=547 ## 0 0 ## ## ### Iteration 1500 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 158 142 336 517 137 46 71 32 ## &lt;=464.6 &lt;=547 ## 31 30 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 102 70 170 830 245 45 30 8 ## &lt;=464.6 &lt;=547 ## 0 0 ## ## ### Iteration 2000 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 220 184 434 697 192 60 93 40 ## &lt;=464.6 &lt;=547 ## 40 40 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 133 90 221 1113 331 64 38 10 ## &lt;=464.6 &lt;=547 ## 0 0 heat map with the values of the matrix heatmap(mx, Colv = NA, Rowv = NA, scale=&quot;none&quot;, symm = F, revC = T, main = &quot;Sample Distribution Heat Map&quot;) 2.4.2 keep sample matrix over a sliding window definitions and initialization set.seed(1) reset_stream(strA1) w &lt;- 500 binsA &lt;- rep(0, length(splits)) names(binsA) &lt;- paste(&quot;&lt;=&quot;,splits,sep=&quot;&quot;) binsB &lt;- rep(0, length(splits)) names(binsB) &lt;- paste(&quot;&lt;=&quot;,splits,sep=&quot;&quot;) mx&lt;-matrix(0,10,10) rownames(mx)&lt;-colnames(mx)&lt;-names(binsA) windowA &lt;- windowB &lt;- NULL iteration # iterative step for (i in 1:itera){ ai &lt;- get_points(strA1)[1,1] bi &lt;- get_points(strA1)[1,2] binA &lt;- which(ai &lt;= splits)[1] binsA[binA] &lt;- binsA[binA] + 1 binB &lt;- which(bi &lt;= splits)[1] binsB[binB] &lt;- binsB[binB] + 1 mx[binA,binB]&lt;-mx[binA,binB] + 1 windowA &lt;- c(windowA, ai) # defining two windows windowB &lt;- c(windowB, bi) # one for each stream if (length(windowA) &gt; w) { oldbinA &lt;- which(windowA[1] &lt;= splits)[1] binsA[oldbinA] &lt;- binsA[oldbinA] - 1 windowA &lt;- windowA[-1] oldbinB &lt;- which(windowB[1] &lt;= splits)[1] binsB[oldbinB] &lt;- binsB[oldbinB] - 1 windowB &lt;- windowB[-1] mx[oldbinA,oldbinB]&lt;-mx[oldbinA,oldbinB] - 1 # droping the first value from the window } # printing the two vectors just for control if (i %% 500 == 0){ cat(&quot;\\n ### Iteration&quot;,i, &quot;\\n&quot;) print(binsA) print(binsB) } } ## ## ### Iteration 500 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 55 53 117 186 26 12 22 11 ## &lt;=464.6 &lt;=547 ## 8 10 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 28 24 65 268 90 14 9 2 ## &lt;=464.6 &lt;=547 ## 0 0 ## ## ### Iteration 1000 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 47 43 108 176 63 16 20 8 ## &lt;=464.6 &lt;=547 ## 10 9 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 35 17 68 287 68 12 10 3 ## &lt;=464.6 &lt;=547 ## 0 0 ## ## ### Iteration 1500 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 56 46 111 155 48 18 29 13 ## &lt;=464.6 &lt;=547 ## 13 11 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 39 29 37 275 87 19 11 3 ## &lt;=464.6 &lt;=547 ## 0 0 ## ## ### Iteration 2000 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 62 42 98 180 55 14 22 8 ## &lt;=464.6 &lt;=547 ## 9 10 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 31 20 51 283 86 19 8 2 ## &lt;=464.6 &lt;=547 ## 0 0 heat map with the values of the matrix heatmap(mx, Colv = NA, Rowv = NA, scale=&quot;none&quot;, symm = F, revC = T, main = &quot;Sliding Distribution Heat Map&quot;) 2.4.3 keep sample matrix over a alpha weighted sliding window definitions and initialization set.seed(1) reset_stream(strA1) w &lt;- 500 eps &lt;- 0.05 alpha &lt;- eps^(1/w) # defining an alpha value # initialization set.seed(1) binsA &lt;- rep(0, length(splits)) names(binsA) &lt;- paste(&quot;&lt;=&quot;,splits,sep=&quot;&quot;) binsB &lt;- rep(0, length(splits)) names(binsB) &lt;- paste(&quot;&lt;=&quot;,splits,sep=&quot;&quot;) mx&lt;-matrix(0,10,10) rownames(mx)&lt;-colnames(mx)&lt;-names(binsA) windowA &lt;- windowB &lt;- NULL iteration # iterative step for (i in 1:itera){ ai &lt;- get_points(strA1)[1,1] bi &lt;- get_points(strA1)[1,2] binA &lt;- which(ai &lt;= splits)[1] binsA &lt;-binsA * alpha binsA[binA] &lt;- binsA[binA] + 1 binB &lt;- which(bi &lt;= splits)[1] binsB &lt;-binsB * alpha binsB[binB] &lt;- binsB[binB] + 1 mx&lt;-mx * alpha #multiplying the matrix by alpha before updating it mx[binA,binB]&lt;-mx[binA,binB] + 1 # updating the matrix with a new count windowA &lt;- c(windowA, ai) windowB &lt;- c(windowB, bi) if (length(window) &gt; w) { oldbinA &lt;- which(windowA[1] &lt;= splits)[1] binsA[oldbinA] &lt;- binsA[oldbinA] - 1 windowA &lt;- windowA[-1] oldbinB &lt;- which(windowB[1] &lt;= splits)[1] binsB[oldbinB] &lt;- binsB[oldbinB] - 1 windowB &lt;- windowB[-1] mx[oldbinA,oldbinB]&lt;-mx[oldbinA,oldbinB] - alpha^w } if (i %% 500 == 0){ cat(&quot;\\n ### Iteration&quot;,i, &quot;\\n&quot;) print(binsA) print(binsB) } } ## ## ### Iteration 500 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 ## 21.844505 16.666237 37.111909 55.793857 6.790086 4.175699 7.186667 ## &lt;=382.2 &lt;=464.6 &lt;=547 ## 3.666657 2.804312 2.994440 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 ## 10.9736189 7.0938389 15.3735799 83.7213093 33.9547867 4.7853583 ## &lt;=299.8 &lt;=382.2 &lt;=464.6 &lt;=547 ## 2.6498825 0.4819952 0.0000000 0.0000000 ## ## ### Iteration 1000 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 ## 14.107546 14.755094 36.054027 61.381199 24.348750 3.806958 5.142875 ## &lt;=382.2 &lt;=464.6 &lt;=547 ## 2.241357 2.302978 2.845306 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 ## 8.0095762 5.2937456 22.6375306 104.7363923 21.1806567 2.1218118 ## &lt;=299.8 &lt;=382.2 &lt;=464.6 &lt;=547 ## 2.2089841 0.7973907 0.0000000 0.0000000 ## ## ### Iteration 1500 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 ## 13.312014 16.515870 38.749342 52.187069 17.008119 6.853567 10.290413 ## &lt;=382.2 &lt;=464.6 &lt;=547 ## 4.760139 4.076068 3.631072 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 ## 11.047984 12.298494 11.291555 94.774131 26.182867 6.913750 3.297088 ## &lt;=382.2 &lt;=464.6 &lt;=547 ## 1.577805 0.000000 0.000000 ## ## ### Iteration 2000 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 ## 21.299684 14.035248 32.643604 63.447452 15.366659 4.349388 7.673373 ## &lt;=382.2 &lt;=464.6 &lt;=547 ## 2.685567 2.857291 3.045288 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 ## 11.7954624 5.1047995 10.2461584 98.5215695 29.5609068 8.9826943 ## &lt;=299.8 &lt;=382.2 &lt;=464.6 &lt;=547 ## 2.9337217 0.2582408 0.0000000 0.0000000 heat map with the values of the matrix heatmap(mx, Colv = NA, Rowv = NA, scale=&quot;none&quot;, symm = F, revC = T, main = &quot;Weighted Distribution&quot;) 2.4.4 keep sample matrix over a alpha fading window definitions and initialization set.seed(1) reset_stream(strA1) w &lt;- 500 eps &lt;- 0.05 alpha &lt;- eps^(1/w) binsA &lt;- rep(0, length(splits)) names(binsA) &lt;- paste(&quot;&lt;=&quot;,splits,sep=&quot;&quot;) binsB &lt;- rep(0, length(splits)) names(binsB) &lt;- paste(&quot;&lt;=&quot;,splits,sep=&quot;&quot;) mx&lt;-matrix(0,10,10) rownames(mx)&lt;-colnames(mx)&lt;-names(binsA) iteration # iterative step for (i in 1:itera){ ai &lt;- get_points(strA1)[1,1] bi &lt;- get_points(strA1)[1,2] binA &lt;- which(ai &lt;= splits)[1] binsA[binA] &lt;- binsA[binA] + 1 binB &lt;- which(bi &lt;= splits)[1] binsB[binB] &lt;- binsB[binB] + 1 mx&lt;-mx * alpha # multiplying the matrix by alpha before updating it mx[binA,binB]&lt;-mx[binA,binB] + 1 # updating the matix if (i %% 500 == 0){ cat(&quot;\\n ### Iteration&quot;,i, &quot;\\n&quot;) print(binsA) print(binsB) } } ## ## ### Iteration 500 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 55 53 117 186 26 12 22 11 ## &lt;=464.6 &lt;=547 ## 8 10 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 28 24 65 268 90 14 9 2 ## &lt;=464.6 &lt;=547 ## 0 0 ## ## ### Iteration 1000 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 102 96 225 362 89 28 42 19 ## &lt;=464.6 &lt;=547 ## 18 19 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 63 41 133 555 158 26 19 5 ## &lt;=464.6 &lt;=547 ## 0 0 ## ## ### Iteration 1500 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 158 142 336 517 137 46 71 32 ## &lt;=464.6 &lt;=547 ## 31 30 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 102 70 170 830 245 45 30 8 ## &lt;=464.6 &lt;=547 ## 0 0 ## ## ### Iteration 2000 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 220 184 434 697 192 60 93 40 ## &lt;=464.6 &lt;=547 ## 40 40 ## &lt;=-194.6 &lt;=-112.2 &lt;=-29.8 &lt;=52.6 &lt;=135 &lt;=217.4 &lt;=299.8 &lt;=382.2 ## 133 90 221 1113 331 64 38 10 ## &lt;=464.6 &lt;=547 ## 0 0 heat map with the values of the matrix heatmap(mx, Colv = NA, Rowv = NA, scale=&quot;none&quot;, symm = F, revC = T, main = &quot;Fading Distribution&quot;) 2.4.5 Bonus for a diferent solution https://rpubs.com/franzbischoff/hida_assign1 "],
["stats.html", "3 STATS", " 3 STATS Modelação Estatística Conteúdos programáticos Regressão logística. Análise de sobrevivência. Análise de dados longitudinais. Causalidade. "],
["lesson-1-1.html", "3.1 Lesson 1", " 3.1 Lesson 1 exercise 1 The BMD_weight.sav database contains 190 densitometry records. library(foreign) data1 &lt;- read.spss(file=&quot;2.UploadedData/BMD_weight_new.sav&quot;, use.missing=TRUE) ## re-encoding from UTF-8 Calculate the body mass index. data1$IMC &lt;- ((data1$peso)/((data1$altura)/100)^2) Calculate the mean and standard deviation of total bone mineral density mean(data1$IMC) ## [1] 26.42143 sd(data1$IMC) ## [1] 4.299248 Analyze the relationship between bone mineral density and BMI using linear regression. plot(x = data1$IMC, y=data1$bmdtot) cor.test(data1$IMC, data1$bmdtot, method = &quot;pearson&quot;) ## ## Pearson&#39;s product-moment correlation ## ## data: data1$IMC and data1$bmdtot ## t = 4.4216, df = 186, p-value = 1.664e-05 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.1729248 0.4324277 ## sample estimates: ## cor ## 0.3084029 regressao &lt;- lm(formula = bmdtot ~ IMC, data=data1) summary(regressao) ## ## Call: ## lm(formula = bmdtot ~ IMC, data = data1) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.28807 -0.07629 -0.00038 0.08273 0.37375 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.593934 0.052316 11.353 &lt; 2e-16 *** ## IMC 0.008639 0.001954 4.422 1.66e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.1155 on 186 degrees of freedom ## (2 observations deleted due to missingness) ## Multiple R-squared: 0.09511, Adjusted R-squared: 0.09025 ## F-statistic: 19.55 on 1 and 186 DF, p-value: 1.664e-05 Compare the BMDTOT average according to the type of medication, adjusting for BMI and age. regressaoM &lt;- lm(formula = bmdtot ~ Medication + IMC + idade, data=data1) Check the assumptions for the model used in d). plot(regressaoM$fitted.values, regressaoM$residuals) hist(regressaoM$residuals) or we can plot everything plot(regressaoM) exercise 2 The data in the score2013.sav file refer to 1768 admissions to pediatric intensive care units in several Portuguese hospital units. data2 &lt;- read.spss(file=&quot;2.UploadedData/score2013.sav&quot;, use.missing=TRUE) ## re-encoding from UTF-8 The minimum systolic tension of the first 12 hours of hospitalization and mechanical ventilation at some point in the first hour of hospitalization are potential predictors of mortality in the ICU. summary(data2) ## Length Class Mode ## sexo 1768 factor numeric ## peso 1768 factor numeric ## outcome 1768 factor numeric ## apneia 1768 factor numeric ## ventil 1768 factor numeric ## hmedica 1768 factor numeric ## CPAP 1768 factor numeric ## Pupil 1768 factor numeric ## TAS12 1768 factor numeric ## temp12 1768 factor numeric ## entub 1768 factor numeric Study the individual association of each of them with mortality first. data2$TAS12 &lt;- as.numeric(factor(data2$TAS12)) logistic1 &lt;- glm(outcome ~ TAS12, data = data2, family = &quot;binomial&quot;) logistic2 &lt;- glm(outcome ~ ventil, data = data2, family = &quot;binomial&quot;) summary(logistic1) ## ## Call: ## glm(formula = outcome ~ TAS12, family = &quot;binomial&quot;, data = data2) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -1.1116 -0.3953 -0.2934 -0.2225 3.0054 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.054551 0.215283 -0.253 0.8 ## TAS12 -0.051158 0.004748 -10.776 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 948.95 on 1767 degrees of freedom ## Residual deviance: 825.01 on 1766 degrees of freedom ## AIC: 829.01 ## ## Number of Fisher Scoring iterations: 6 summary(logistic2) ## ## Call: ## glm(formula = outcome ~ ventil, family = &quot;binomial&quot;, data = data2) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.4776 -0.4776 -0.3022 -0.3022 2.4936 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -3.0634 0.1617 -18.940 &lt; 2e-16 *** ## ventilSim 0.9500 0.1952 4.868 1.13e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 948.95 on 1767 degrees of freedom ## Residual deviance: 923.16 on 1766 degrees of freedom ## AIC: 927.16 ## ## Number of Fisher Scoring iterations: 5 exp(cbind(OR = coef(logistic1), confint(logistic1))) ## Waiting for profiling to be done... ## OR 2.5 % 97.5 % ## (Intercept) 0.9469106 0.6185266 1.4405861 ## TAS12 0.9501285 0.9411981 0.9589037 exp(cbind(OR = coef(logistic2), confint(logistic2))) ## Waiting for profiling to be done... ## OR 2.5 % 97.5 % ## (Intercept) 0.04672897 0.03348726 0.06324236 ## ventilSim 2.58560403 1.77721401 3.82737660 Then test the interaction of these two variables and interpret the results. logistic3 &lt;- glm(outcome ~ ventil + TAS12 + ventil * TAS12, data = data2, family = &quot;binomial&quot;) summary(logistic3) ## ## Call: ## glm(formula = outcome ~ ventil + TAS12 + ventil * TAS12, family = &quot;binomial&quot;, ## data = data2) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -1.2779 -0.3739 -0.2875 -0.2301 3.0171 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.323763 0.464494 -2.850 0.004373 ** ## ventilSim 1.669344 0.529036 3.155 0.001603 ** ## TAS12 -0.031758 0.008677 -3.660 0.000252 *** ## ventilSim:TAS12 -0.024409 0.010569 -2.310 0.020914 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 948.95 on 1767 degrees of freedom ## Residual deviance: 811.29 on 1764 degrees of freedom ## AIC: 819.29 ## ## Number of Fisher Scoring iterations: 6 exp(cbind(OR = coef(logistic3), confint(logistic3))) ## Waiting for profiling to be done... ## OR 2.5 % 97.5 % ## (Intercept) 0.2661319 0.1024458 0.6380664 ## ventilSim 5.3086860 1.9349881 15.5012115 ## TAS12 0.9687412 0.9524027 0.9854715 ## ventilSim:TAS12 0.9758865 0.9557194 0.9962234 Using all the variables in the database, build a model for mortality and study the model’s discrimination and calibration. accuracy pred&lt;-predict(logistic3, type = &quot;response&quot;) pred01&lt;-ifelse(pred&lt;0.5, 0, 1) table(pred01,data2$outcome) ## ## pred01 Vivo Falecido ## 0 1624 121 ## 1 10 13 acc&lt;-(1624+13)/(1624+121+10+13) acc ## [1] 0.925905 AUC library(pROC) ## Type &#39;citation(&quot;pROC&quot;)&#39; for a citation. ## ## Attaching package: &#39;pROC&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## cov, smooth, var g &lt;- roc(outcome ~ pred, data = data2) ## Setting levels: control = Vivo, case = Falecido ## Setting direction: controls &lt; cases plot(g) Goodness of fit test library(ResourceSelection) ## ResourceSelection 0.3-5 2019-07-22 hoslem.test(data2$outcome, pred01) ## ## Hosmer and Lemeshow goodness of fit (GOF) test ## ## data: data2$outcome, pred01 ## X-squared = 1768, df = 8, p-value &lt; 2.2e-16 "],
["lesson-2-1.html", "3.2 Lesson 2", " 3.2 Lesson 2 Length of stay is an important indicator used in health care assessment. The UCIP_PRISM.sav database contains the record of 812 pediatric admissions in 3 intensive care units (Variable P1: Coimbra, Lisboa and Porto). We want to compare the hospitalization time (Variable tempoint) of the three units. However, we must take into account that the units may receive patients with different levels of severity. The PRISM variable is an indicator of the patient’s severity at the date of admission. library(foreign) aula2 &lt;- read.spss(file=&quot;2.UploadedData/UCIP_PRISM HEADS.sav&quot;, use.missing=TRUE) ## re-encoding from UTF-8 summary(aula2) ## Length Class Mode ## P1 812 factor numeric ## PRISM 812 -none- numeric ## tempoint 812 -none- numeric Make a histogram of the length of stay hist(aula2$tempoint) 2.Make a linear regression model with the dependent variable length of stay (tempoint), and the intensive care unit (P1) and PRISM variables as independent variables. regressao &lt;- lm(formula = tempoint ~ P1 + PRISM, data=aula2) summary(regressao) ## ## Call: ## lm(formula = tempoint ~ P1 + PRISM, data = aula2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -14.987 -6.568 -3.944 -0.047 255.598 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.84611 1.36895 2.810 0.00508 ** ## P1Lisboa 4.27584 1.54619 2.765 0.00581 ** ## P1Porto 2.70428 1.54758 1.747 0.08094 . ## PRISM 0.18291 0.07643 2.393 0.01693 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 18.04 on 808 degrees of freedom ## Multiple R-squared: 0.01558, Adjusted R-squared: 0.01192 ## F-statistic: 4.261 on 3 and 808 DF, p-value: 0.005353 3.Check that the model assumptions in question b) are not satisfied. plot(regressao$fitted.values, regressao$residuals) hist(regressao$residuals) or you can plot everything plot(regressao) 4.Transform the length of stay variable into the Neperian logarithm of length of stay (tempoint -&gt; logtempoint). aula2$logtempoint &lt;- log(aula2$tempoint) 5.Analyze the differences in the logarithm of length of stay between the 3 units, adjusting to the severity of the patients, ie, remake the model in question b) but with the logarithm of length of stay as dependent variable. logregressao &lt;- lm(formula = logtempoint ~ P1 + PRISM, data=aula2) summary(logregressao) ## ## Call: ## lm(formula = logtempoint ~ P1 + PRISM, data = aula2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.4230 -0.9225 -0.1198 0.7848 4.2611 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.734535 0.085985 8.543 &lt; 2e-16 *** ## P1Lisboa 0.396173 0.097117 4.079 4.96e-05 *** ## P1Porto 0.319145 0.097205 3.283 0.00107 ** ## PRISM 0.026849 0.004801 5.593 3.06e-08 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.133 on 808 degrees of freedom ## Multiple R-squared: 0.05785, Adjusted R-squared: 0.05435 ## F-statistic: 16.54 on 3 and 808 DF, p-value: 1.954e-10 Geometric mean ratio (percentage value) (exp(logregressao$coefficients)-1)*100 ## (Intercept) P1Lisboa P1Porto PRISM ## 108.451271 48.612650 37.595032 2.721276 6.Check that the model assumptions in question e) are satisfied. plot(logregressao$fitted.values, logregressao$residuals) hist(logregressao$residuals) or you can plot everything plot(logregressao) "],
["learn.html", "4 LEARN", " 4 LEARN Macine Learning Conteúdos programáticos O processo de extração de conhecimento de dados Compreensão do negócio Compreensão dos dados Pré-processamento de dados Modelação de dados Avaliação de modelos de extração de conhecimento de dados Implantação prática dos resultados de modelação Aprendizagem automática Aprender conceitos a partir de dados Processos indutivos vs processos dedutivos Viés indutivo Validação de modelos Medidas de erro e processos de estimação Aprendizagem supervisionada Árvores de decisão Redes Bayesianas Redes neuronais Deep learning e análise de grandes bases de dados Aprendizagem não supervisionada Análise de clusters Deteção de casos extremos e anomalias Associação e análise de padrões frequentes Interpretação de grandes bases de dados "],
["lesson-1-2.html", "4.1 Lesson 1", " 4.1 Lesson 1 2020-02-04 This exercise was done as described by: https://machinelearningmastery.com/machine-learning-in-r-step-by-step/ but using a data set from: https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Coimbra# Read the data dataset &lt;- read.csv(&quot;2.UploadedData/dataR2.csv&quot;) Factor variable Classification dataset$Classification&lt;-as.factor(dataset$Classification) NOTE: in order to use the caret packages in all its’ capabilities you must do install.packages(\"caret\", dependencies = T) create a validation dataset and use the remaing for training library(caret) ## Loading required package: lattice ## Loading required package: ggplot2 # create a list of 80% of the rows in the original dataset we can use for training validation_index &lt;- createDataPartition(dataset$Classification, p=0.80, list=FALSE) # select 20% of the data for validation validation &lt;- dataset[-validation_index,] # use the remaining 80% of data to training and testing the models dataset &lt;- dataset[validation_index,] dimensions of the new dataset dim(dataset) ## [1] 94 10 list types for each attribute sapply(dataset, class) ## Age BMI Glucose Insulin HOMA ## &quot;integer&quot; &quot;numeric&quot; &quot;integer&quot; &quot;numeric&quot; &quot;numeric&quot; ## Leptin Adiponectin Resistin MCP.1 Classification ## &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;factor&quot; take a peek at the first 5 rows of the data head(dataset) ## Age BMI Glucose Insulin HOMA Leptin Adiponectin Resistin ## 1 48 23.50000 70 2.707 0.4674087 8.8071 9.702400 7.99585 ## 2 83 20.69049 92 3.115 0.7068973 8.8438 5.429285 4.06405 ## 3 82 23.12467 91 4.498 1.0096511 17.9393 22.432040 9.27715 ## 4 68 21.36752 77 3.226 0.6127249 9.8827 7.169560 12.76600 ## 6 49 22.85446 92 3.226 0.7320869 6.8317 13.679750 10.31760 ## 7 89 22.70000 77 4.690 0.8907873 6.9640 5.589865 12.93610 ## MCP.1 Classification ## 1 417.114 1 ## 2 468.786 1 ## 3 554.697 1 ## 4 928.220 1 ## 6 530.410 1 ## 7 1256.083 1 list the levels for the class levels(dataset$Classification) ## [1] &quot;1&quot; &quot;2&quot; summarize the class distribution percentage &lt;- prop.table(table(dataset$Classification)) * 100 cbind(freq=table(dataset$Classification), percentage=percentage) ## freq percentage ## 1 42 44.68085 ## 2 52 55.31915 summarize attribute distributions summary(dataset) ## Age BMI Glucose Insulin ## Min. :24.0 Min. :18.37 Min. : 60.00 Min. : 2.432 ## 1st Qu.:45.0 1st Qu.:23.19 1st Qu.: 86.00 1st Qu.: 4.436 ## Median :57.5 Median :28.51 Median : 92.00 Median : 5.925 ## Mean :57.4 Mean :27.97 Mean : 96.03 Mean : 9.934 ## 3rd Qu.:69.0 3rd Qu.:31.59 3rd Qu.:101.75 3rd Qu.:10.888 ## Max. :89.0 Max. :38.58 Max. :196.00 Max. :58.460 ## HOMA Leptin Adiponectin Resistin ## Min. : 0.4674 Min. : 4.311 Min. : 1.656 Min. : 3.210 ## 1st Qu.: 1.0088 1st Qu.:12.208 1st Qu.: 5.644 1st Qu.: 6.745 ## Median : 1.3809 Median :21.783 Median : 8.262 Median :11.345 ## Mean : 2.5703 Mean :27.985 Mean : 9.684 Mean :14.753 ## 3rd Qu.: 2.6326 3rd Qu.:39.788 3rd Qu.:11.439 3rd Qu.:18.156 ## Max. :25.0503 Max. :90.280 Max. :36.060 Max. :82.100 ## MCP.1 Classification ## Min. : 90.09 1:42 ## 1st Qu.: 268.54 2:52 ## Median : 476.08 ## Mean : 529.46 ## 3rd Qu.: 691.07 ## Max. :1698.44 split input and output x &lt;- dataset[,1:9] y &lt;- dataset[,10] boxplot for each attribute on one image par(mfrow=c(2,5)) for(i in 1:9) { boxplot(x[,i], main=names(dataset)[i]) } barplot for class breakdown par(mfrow=c(1,1)) plot(y) scatterplot matrix scales &lt;- list(x=list(relation=&quot;free&quot;), y=list(relation=&quot;free&quot;)) featurePlot(x=x, y=y, plot=&quot;ellipse&quot;) box and whisker plots for each attribute scales &lt;- list(x=list(relation=&quot;free&quot;), y=list(relation=&quot;free&quot;)) featurePlot(x=x, y=y, plot=&quot;box&quot;, scales=scales) density plots for each attribute by class value scales &lt;- list(x=list(relation=&quot;free&quot;), y=list(relation=&quot;free&quot;)) featurePlot(x=x, y=y, plot=&quot;density&quot;, scales=scales) Run algorithms using 10-fold cross validation control &lt;- trainControl(method=&quot;cv&quot;, number=10) metric &lt;- &quot;Accuracy&quot; linear algorithms set.seed(7) fit.lda &lt;- train(Classification~., data=dataset, method=&quot;lda&quot;, metric=metric, trControl=control) nonlinear algorithms CART set.seed(7) fit.cart &lt;- train(Classification~., data=dataset, method=&quot;rpart&quot;, metric=metric, trControl=control) kNN set.seed(7) fit.knn &lt;- train(Classification~., data=dataset, method=&quot;knn&quot;, metric=metric, trControl=control) advanced algorithms SVM set.seed(7) fit.svm &lt;- train(Classification~., data=dataset, method=&quot;svmRadial&quot;, metric=metric, trControl=control) Random Forest set.seed(7) fit.rf &lt;- train(Classification~., data=dataset, method=&quot;rf&quot;, metric=metric, trControl=control) summarize accuracy of models results &lt;- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf)) summary(results) ## ## Call: ## summary.resamples(object = results) ## ## Models: lda, cart, knn, svm, rf ## Number of resamples: 10 ## ## Accuracy ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## lda 0.4444444 0.4583333 0.7333333 0.7077778 0.8888889 1.0000000 0 ## cart 0.3333333 0.6750000 0.7777778 0.7025253 0.7777778 0.8000000 0 ## knn 0.2222222 0.4722222 0.6515152 0.5625253 0.6666667 0.7000000 0 ## svm 0.5555556 0.6666667 0.7388889 0.7207071 0.7944444 0.8888889 0 ## rf 0.3333333 0.7068182 0.7888889 0.7560606 0.8888889 0.8888889 0 ## ## Kappa ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## lda -0.1538462 -0.07684530 0.4707317 0.41063067 0.7776735 1.0000000 0 ## cart -0.3500000 0.30270270 0.5263158 0.38642812 0.5500000 0.6000000 0 ## knn -0.6153846 -0.06001284 0.2558248 0.09919547 0.3330206 0.4000000 0 ## svm 0.1000000 0.31613508 0.4631579 0.43029648 0.5815789 0.7804878 0 ## rf -0.4210526 0.40526316 0.5708502 0.49488299 0.7692308 0.7804878 0 compare accuracy of models dotplot(results) summarize Best Model print(fit.rf) ## Random Forest ## ## 94 samples ## 9 predictor ## 2 classes: &#39;1&#39;, &#39;2&#39; ## ## No pre-processing ## Resampling: Cross-Validated (10 fold) ## Summary of sample sizes: 85, 85, 83, 84, 84, 85, ... ## Resampling results across tuning parameters: ## ## mtry Accuracy Kappa ## 2 0.7116162 0.4152202 ## 5 0.7560606 0.4948830 ## 9 0.7538384 0.4924010 ## ## Accuracy was used to select the optimal model using the largest value. ## The final value used for the model was mtry = 5. estimate skill of LDA on the validation dataset predictions &lt;- predict(fit.rf, validation) confusionMatrix(predictions, validation$Classification) ## Confusion Matrix and Statistics ## ## Reference ## Prediction 1 2 ## 1 6 2 ## 2 4 10 ## ## Accuracy : 0.7273 ## 95% CI : (0.4978, 0.8927) ## No Information Rate : 0.5455 ## P-Value [Acc &gt; NIR] : 0.06495 ## ## Kappa : 0.4407 ## ## Mcnemar&#39;s Test P-Value : 0.68309 ## ## Sensitivity : 0.6000 ## Specificity : 0.8333 ## Pos Pred Value : 0.7500 ## Neg Pred Value : 0.7143 ## Prevalence : 0.4545 ## Detection Rate : 0.2727 ## Detection Prevalence : 0.3636 ## Balanced Accuracy : 0.7167 ## ## &#39;Positive&#39; Class : 1 ## In this post you discovered step-by-step how to complete your first machine learning project in R "],
["bayes.html", "5 BAYES", " 5 BAYES Modelação Estatística Bayesiana Conteúdos programáticos Inferência Bayesiana: Introdução à inferência Bayesiana: Probabilidade e parâmetros; Inferência frequentista clássica versus inferência Bayesiana; Fundamentos da inferência Bayesiana; Distribuições a priori; Distribuições a posteriori; Distribuições preditivas a posteriori; Modelos Bayesianos básicos; Modelação hierárquica; Avaliação dos modelos. Construção de modelos de inferência Bayesiana: Inferência Bayesiana com distribuições a priori conjugadas; Computação Bayesiana – métodos de Monte Carlo, métodos de Monte Carlo via Cadeias de Markov (MCMC), algoritmo de Metropolis-Hastings, algoritmo de Gibbs e outros algoritmos relacionados; Métodos de avaliação da qualidade dos modelos (escolha de valores iniciais, convergência, eficiência e precisão); Métodos de selecção de modelos; Aplicação dos métodos de inferência Bayesiana a problemas mais comuns de inferência estatística – modelos de regressão, análise de dados categóricos e modelos de síntese de evidência. Redes Bayesianas: Introdução às Redes Bayesianas: Motivação e exemplos; Probabilidade e aplicações médicas; Modelos gráficos de probabilidade; Semântica e factorização nas redes Bayesianas. Construção de redes Bayesianas a partir de dados: Aprendizagem automática; Estimação de parâmetros de redes Bayesianas; Aprendizagem da estrutura de redes Bayesianas; Aprendizagem com dados incompletos. "],
["top.html", "6 TOP.HIDA", " 6 TOP.HIDA Tópicos avançados em HIDA Conteúdos programáticos Os conteúdos abrangerão as diversas áreas da análise inteligente de dados, nomeadamente metodologias de visualização, pré-processamento, exploração e classificação de dados, proporcionando também a expansão dos conteúdos de outras UC relacionadas. A escolha dos tópicos será feita em cada edição desta unidade curricular, tendo em consideração não só o perfil e interesses dos alunos, como também os tópicos que no momento se considerem ser os mais relevantes na área. "],
["seminar1.html", "6.1 Seminar 1", " 6.1 Seminar 1 2020-02-04 Physiological signal processing in affective computing by Susana Brás Susana Brás is Postdoctoral researcher at Institute of Electronics and Telematics Engineering of Aveiro (IEETA), University of Aveiro, Portugal. At this moment, she is focused on ECG biometric identification, emotional modulated environments and information extraction from large biomedical databases. Before, she was a PhD student at Abel Salazar Biomedical Sciences Institute, at University of Porto, Portugal. Her thesis was focused on automation in anesthesia, basically the drug distribution and effect (alterations in the brain electrical activity) were studied, modeled and a controller was presented for the hypnotic effect. Her background is in Applied Mathematics, from the Sciences Faculty, at University of Porto. 6.1.1 Bruno Lima Podemos definir sinais como dados indexados a uma variável temporal e que podem ser oriundos de campos tão diversos como a biomedicina ou as comunicações sem fios. Neste seminário foi-nos apresentado o conceito de computação afectiva que consiste em identificar emoções a partir do processamento de sinais fisiológicos. O conceito de emoção é de difícil definição ainda que a caracterização das emoções seja algo mais perceptível. Conseguimos reconhecer emoções através de respostas fisiológicas como sejam o batimento cardíaco, a expressão facial, a tensão, o riso, a rubescência ou a sudação embora estas reacções do corpo variem de pessoa para pessoa. Com a ajuda de disciplinas como a psicofisiologia ou a psiconeuroimunologia pretende-se fazer a caracterização das emoções que permitam treinar algoritmos que identifiquem essas emoções e que assim auxiliem sistemas a tomar respostas adequadas às emoções identificadas. O desafio é o de criar um sistema que reconheça, interprete, processe ou simule afectos humanos. Esta computação afectiva procurará ser uma ajuda perante diferentes estados emocionais. Podemos imaginar uma robot que seja de facto uma companhia para os humanos e um prestador de cuidados emocionais. A criação de um sistema como descrito está sujeito, não só, a grandes desafios tecnológicos (como sejam: a monitorização, armazenamento, processamento, data mining e machine learning) mas também desafios éticos. Com a identificação de emoções identificam-se também preferências e consequentemente surge a possibilidade de manipular essas preferências. No campo da saúde, a chamada ‘emotional analytics’ permite prever diagnósticos perante a identificação de emoções e consequentemente actuar preventivamente minimizando danos mais graves. Em campos como a saúde mental ou a saúde geriátrica a correcta classificação das emoções dos doentes é a chave para prestar os melhores cuidados de saúde. "],
["references.html", "References", " References "]
]
