[
["assignment-glucose.html", "2.6 assignment Glucose", " 2.6 assignment Glucose Assignment from Lesson 3 2020-02-26 Using only the base and stats packages in R, define the iterative steps of ExpectationMaximization applied to the Glucose variable of the Breast Cancer Coimbra data set, searching for 2 or more latent classes. 2.6.1 Defining a function for Expectation-Maximization algorithm # function for E-M algorithm emf&lt;-function(xx = vv, # a vector with the data m = 2, # number of clustres method = &quot;crisp&quot;, # method used for parameters estimation in each class; options: &quot;crisp&quot; or &quot;soft&quot; itera = 10, # number of iterations eps = 0.01, # the accepted error to converge (e) params = &quot;random&quot;, # initial parameters, if &quot;random&quot; &#39;m&#39; values from &#39;xx&#39; are randomly select, or we can input a vector with &#39;m&#39; values main=&quot;Glucose level&quot;, # histogram title seed = 0 # value for set.seed() ){ medias=NA desvpadrao=NA if (params == &quot;random&quot;) { set.seed(seed) param.mean&lt;-sample(xx,m) param.sd&lt;-rep(sd(xx)/m,m) } else { param.mean&lt;-params param.sd&lt;-rep(sd(xx)/m,m) } for (k in 1:itera){ densities&lt;-sapply(1:m, function(i){dnorm(xx, mean=param.mean[i], sd=param.sd[i])}) relevance&lt;-t(apply(densities,1,function(l){l/sum(l)})) attrib&lt;-t(apply(relevance,1, function(l){replace(rep(0,m),which.max(l)[1],1)})) # Re-estimates the parameters of the probability distribution of each class if (method == &quot;crisp&quot;) { ## M-step (alternative 1: crisp) param.mean.new&lt;-sapply(1:m, function(j){mean(xx[attrib[,j]==1])}) param.sd.new&lt;-sapply(1:m, function(j){sqrt(sum(relevance[,j]*(xx-param.mean[j])^2)/sum(relevance[,j]))}) } else { ## M-step (alternative 2: soft) param.mean.new&lt;-sapply(1:m, function(j){sum(xx*relevance[,j])/sum(relevance[,j])}) param.sd.new&lt;-sapply(1:m, function(j){sqrt(sum(relevance[,j]*(xx-param.mean[j])^2)/sum(relevance[,j]))}) } # convergence the maximum number of iterations (k). cat(&quot;iteration&quot;, k, &quot;evolution:&quot;, dif&lt;-sum(abs(param.mean.new - param.mean)), &quot;\\n&quot;) if(dif &lt; eps) break # the accepted error to converge (e) param.mean&lt;-param.mean.new param.sd&lt;-param.sd.new } ## ploting the histogram and density curve for the vector of data hist(xx, density = 20, main=main, xlab=&quot;&quot;, freq=F) lines(density(xx), lwd=2,col=&quot;black&quot;) ## save means, std deviations and classes&#39; attributes on a list result&lt;-list(medias = param.mean, desvpadrao = param.sd, classe = as.data.frame(attrib)) } 2.6.2 2 clusters density curves # reading the data breast&lt;-read.csv(&quot;2.UploadedData/dataR2.csv&quot;) par(mfrow=c(1,2)) # run the EM function for Glucose with 2 clusters and max 20 iterations res&lt;-emf(xx = breast$Glucose, itera = 20, m=2, method = &quot;crisp&quot;, main = &quot;Glucose values&quot;, seed = 0) ## iteration 1 evolution: 17.79331 ## iteration 2 evolution: 9.991458 ## iteration 3 evolution: 9.361819 ## iteration 4 evolution: 1.118374 ## iteration 5 evolution: 2.419946 ## iteration 6 evolution: 5.454559 ## iteration 7 evolution: 0 # add density curves for each class lines(density(rnorm(100, res$medias[1], res$desvpadrao[1]), bw = 12),lwd=2,col=3) lines(density(rnorm(100, res$medias[2], res$desvpadrao[2]), bw = 12),lwd=2,col=4) ## column with 2 classes attach(res$classe) classe2&lt;-ifelse(V1 == 1, 3 , 4) # create &#39;m&#39; classes detach() # Plot the values in which each point has a color corresponding to the class to which it belongs plot(1:length(breast$Glucose), breast$Glucose, col=classe2, pch=20, xlab=&quot;index&quot;, ylab=&quot;Glucose values&quot;, main = &quot; Glucose colored by class (m=2)&quot;) 2.6.3 3 clusters density curves par(mfrow=c(1,2)) # run the EM function for Glucose with 3 clusters and max 20 iterations res&lt;-emf(xx = breast$Glucose, itera = 20, m=3, method = &quot;crisp&quot;, main = &quot;Glucose values&quot;, seed = 0) ## iteration 1 evolution: 22.28802 ## iteration 2 evolution: 16.6689 ## iteration 3 evolution: 3.445327 ## iteration 4 evolution: 0.3056396 ## iteration 5 evolution: 0 # add density curves for each class lines(density(rnorm(100, res$medias[1], res$desvpadrao[1]), bw = 12),lwd=2,col=3) lines(density(rnorm(100, res$medias[2], res$desvpadrao[2]), bw = 12),lwd=2,col=4) lines(density(rnorm(100, res$medias[3], res$desvpadrao[3]), bw = 12),lwd=2,col=5) ## column with 3 classes attach(res$classe) classe3&lt;-ifelse(V1 == 1, 3, ifelse(V2 == 1, 4, 5)) # create &#39;m&#39; classes detach() plot(1:length(breast$Glucose), breast$Glucose, col=classe3, pch=20, xlab=&quot;index&quot;, ylab=&quot;Glucose values&quot;, main = &quot; Glucose colored by class (m=3)&quot;) "]
]
