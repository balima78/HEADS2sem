[
["lesson-9-1.html", "4.12 Lesson 9", " 4.12 Lesson 9 2020-05-12 Read data and packages ### Packages # Load package &#39;caret&#39; library(caret) # Load package &#39;ellipse&#39; library(ellipse) # Load package &#39;e1071&#39; library(&quot;e1071&quot;) # Load package &#39;pROC&#39; library(pROC) ### Data data(iris) attach(iris) x &lt;- subset(iris, select=-Species) y &lt;- Species plot correlation between features classified by the outcome par(mfrow=c(1,1)) featurePlot(x=x, y=y, plot=&quot;ellipse&quot;) Identify species according to Petals width and length plot(x=Petal.Length, y=Petal.Width, col=Species, pch=20, axes=F, main=&quot;Iris Data Set&quot;, ylab=&quot;Petal Width&quot;, xlab=&quot;Petal Length&quot;) legend(x=4, y=0.5, cex=.8, legend=levels(Species), col=1:3, pch=20) axis(1) axis(2) 4.12.1 SVM classification 4.12.1.1 Linear - 2 features svm.iris.linear &lt;- svm(Species ~ Petal.Width + Petal.Length, data=iris, kernel=&quot;linear&quot;) summary(svm.iris.linear) ## ## Call: ## svm(formula = Species ~ Petal.Width + Petal.Length, data = iris, ## kernel = &quot;linear&quot;) ## ## ## Parameters: ## SVM-Type: C-classification ## SVM-Kernel: linear ## cost: 1 ## ## Number of Support Vectors: 31 ## ## ( 3 15 13 ) ## ## ## Number of Classes: 3 ## ## Levels: ## setosa versicolor virginica accuracy pred.linear &lt;- predict(svm.iris.linear,x) print(table(pred.linear,y)) ## y ## pred.linear setosa versicolor virginica ## setosa 50 0 0 ## versicolor 0 47 4 ## virginica 0 3 46 classification plot plot(svm.iris.linear, data = iris, Petal.Width ~ Petal.Length, svSymbol = 17, dataSymbol = 20, symbolPalette = c(3,2,4), cex=2, color.palette=grey.colors) 4.12.1.2 Linear - 4 features svm.iris.linear.all &lt;- svm(Species ~ ., data=iris, kernel=&quot;linear&quot;) summary(svm.iris.linear.all) ## ## Call: ## svm(formula = Species ~ ., data = iris, kernel = &quot;linear&quot;) ## ## ## Parameters: ## SVM-Type: C-classification ## SVM-Kernel: linear ## cost: 1 ## ## Number of Support Vectors: 29 ## ## ( 2 15 12 ) ## ## ## Number of Classes: 3 ## ## Levels: ## setosa versicolor virginica accuracy pred.all &lt;- predict(svm.iris.linear.all,x) print(table(pred.all,y)) ## y ## pred.all setosa versicolor virginica ## setosa 50 0 0 ## versicolor 0 46 1 ## virginica 0 4 49 classification plot plot(svm.iris.linear.all, data = iris, Petal.Width ~ Petal.Length, # para ver em 2D é preciso escolher duas variaveis svSymbol = 17, dataSymbol = 20, symbolPalette = c(3,2,4), cex=2, color.palette=grey.colors, slice = list(Sepal.Width = 3, Sepal.Length = 6.0)) # fixam-se as duas variaveis que não estão disponiveis 4.12.1.3 Radial - 2 features svm.iris &lt;- svm(Species ~ Petal.Width + Petal.Length, data=iris) summary(svm.iris) ## ## Call: ## svm(formula = Species ~ Petal.Width + Petal.Length, data = iris) ## ## ## Parameters: ## SVM-Type: C-classification ## SVM-Kernel: radial ## cost: 1 ## ## Number of Support Vectors: 37 ## ## ( 5 16 16 ) ## ## ## Number of Classes: 3 ## ## Levels: ## setosa versicolor virginica accuracy pred &lt;- predict(svm.iris,x) print(table(pred,y)) ## y ## pred setosa versicolor virginica ## setosa 50 0 0 ## versicolor 0 47 3 ## virginica 0 3 47 classification plot plot(svm.iris, data = iris, Petal.Width ~ Petal.Length, svSymbol = 17, dataSymbol = 20, symbolPalette = c(3,2,4), cex=2, color.palette=grey.colors) 4.12.1.4 Radial - 4 features svm.iris.all &lt;- svm(Species ~ ., data=iris) summary(svm.iris.all) ## ## Call: ## svm(formula = Species ~ ., data = iris) ## ## ## Parameters: ## SVM-Type: C-classification ## SVM-Kernel: radial ## cost: 1 ## ## Number of Support Vectors: 51 ## ## ( 8 22 21 ) ## ## ## Number of Classes: 3 ## ## Levels: ## setosa versicolor virginica accuracy pred.all &lt;- predict(svm.iris.all,x) print(table(pred.all,y)) ## y ## pred.all setosa versicolor virginica ## setosa 50 0 0 ## versicolor 0 48 2 ## virginica 0 2 48 classification plot plot(svm.iris.all, data = iris, Petal.Width ~ Petal.Length, # para ver em 2D seleccionam-se duas variaveis svSymbol = 17, dataSymbol = 20, symbolPalette = c(3,2,4), cex=2, color.palette=grey.colors, slice = list(Sepal.Width = 2.5, Sepal.Length = 3.5)) # as restantes variaveis são fixas para determinados valores 4.12.1.5 Tuning SVM parameters set.seed(523) svm.tune &lt;- tune(svm, train.x=x, train.y=y, kernel=&quot;radial&quot;, ranges=list(cost=10^(-1:2), gamma=c(.5,1,2))) print(svm.tune) ## ## Parameter tuning of &#39;svm&#39;: ## ## - sampling method: 10-fold cross validation ## ## - best parameters: ## cost gamma ## 1 0.5 ## ## - best performance: 0.04 with the best parameters (cost, gamma) fit a SVM svm.iris.tuned &lt;- svm(Species ~ ., data=iris, kernel=&quot;radial&quot;, cost=1, gamma=0.5) summary(svm.iris.tuned) ## ## Call: ## svm(formula = Species ~ ., data = iris, kernel = &quot;radial&quot;, cost = 1, ## gamma = 0.5) ## ## ## Parameters: ## SVM-Type: C-classification ## SVM-Kernel: radial ## cost: 1 ## ## Number of Support Vectors: 59 ## ## ( 11 23 25 ) ## ## ## Number of Classes: 3 ## ## Levels: ## setosa versicolor virginica accuracy pred.tuned &lt;- predict(svm.iris.tuned,x) print(table(pred.tuned,y)) ## y ## pred.tuned setosa versicolor virginica ## setosa 50 0 0 ## versicolor 0 48 2 ## virginica 0 2 48 "]
]
