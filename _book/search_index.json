[
["unsupervised-machine-learning.html", "4.10 Unsupervised Machine Learning", " 4.10 Unsupervised Machine Learning 2020-05-05 4.10.1 Clustering and Association Rules Consider the the Cervical Cancer (Risk Factors) data set (available from UCI repository) and exploit the data using association rules (for binary variables) and clustering (for continuous variables). Read data library(tidyverse) ## read the data dataset&lt;-read.csv(&quot;2.UploadedData/risk_factors_cervical_cancer.csv&quot;,na.strings = c(&quot;NA&quot;,&quot;?&quot;,&quot;&quot;)) # identified categorical variables categorical&lt;-c(&quot;Smokes&quot;, &quot;Hormonal.Contraceptives&quot;, &quot;IUD&quot;, # &quot;STDs&quot; not included beacause it is defined from the other STDs &quot;STDs.condylomatosis&quot;,&quot;STDs.cervical.condylomatosis&quot;, &quot;STDs.vulvo.perineal.condylomatosis&quot;, &quot;STDs.syphilis&quot;, &quot;STDs.pelvic.inflammatory.disease&quot;, &quot;STDs.genital.herpes&quot;,&quot;STDs.molluscum.contagiosum&quot;, &quot;STDs.AIDS&quot;, &quot;STDs.HIV&quot;, &quot;STDs.Hepatitis.B&quot;, &quot;STDs.HPV&quot;, &quot;Dx.Cancer&quot;, &quot;Dx.CIN&quot;, &quot;Dx.HPV&quot;, &quot;Hinselmann&quot;, &quot;Schiller&quot;, #, DX not included beacause it is defined from the other Dxs &quot;Citology&quot;, &quot;Biopsy&quot;) # # identified categorical variables continuous&lt;-c(&quot;Age&quot;,&quot;Number.of.sexual.partners&quot;,&quot;First.sexual.intercourse&quot;, &quot;Num.of.pregnancies&quot;,&quot;Smokes..years.&quot;,&quot;Smokes..packs.year.&quot;, &quot;Hormonal.Contraceptives..years.&quot;,&quot;IUD..years.&quot;, &quot;STDs..number.&quot;, &quot;STDs..Number.of.diagnosis&quot; #,&quot;STDs..Time.since.first.diagnosis&quot;, #&quot;STDs..Time.since.last.diagnosis&quot; ) 4.10.1.1 Association rules # selected only categorical features datacat&lt;-dataset %&gt;% select(!!categorical) # transforme as logical # with this transformation we only consider positive events, # i.e, &#39;Smokes&#39; stands for &#39;Smokes = 1&#39; and &#39;Dx.Cancer&#39; stands for &#39;Dx.Cancer&#39; and so on... datacat&lt;-as.data.frame(lapply(datacat, as.logical)) # filter only complete cases datacat_complete&lt;-datacat[complete.cases(datacat), ] str(datacat_complete) ## &#39;data.frame&#39;: 726 obs. of 21 variables: ## $ Smokes : logi FALSE FALSE FALSE TRUE FALSE FALSE ... ## $ Hormonal.Contraceptives : logi FALSE FALSE FALSE TRUE TRUE FALSE ... ## $ IUD : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ STDs.condylomatosis : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ STDs.cervical.condylomatosis : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ STDs.vulvo.perineal.condylomatosis: logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ STDs.syphilis : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ STDs.pelvic.inflammatory.disease : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ STDs.genital.herpes : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ STDs.molluscum.contagiosum : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ STDs.AIDS : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ STDs.HIV : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ STDs.Hepatitis.B : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ STDs.HPV : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ Dx.Cancer : logi FALSE FALSE FALSE TRUE FALSE FALSE ... ## $ Dx.CIN : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ Dx.HPV : logi FALSE FALSE FALSE TRUE FALSE FALSE ... ## $ Hinselmann : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ Schiller : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ Citology : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ Biopsy : logi FALSE FALSE FALSE FALSE FALSE FALSE ... Coerce Item List to the Transactions class library(arules) transactions &lt;- as(datacat_complete, &quot;transactions&quot;) class(transactions) ## [1] &quot;transactions&quot; ## attr(,&quot;package&quot;) ## [1] &quot;arules&quot; summary(transactions) ## transactions as itemMatrix in sparse format with ## 726 rows (elements/itemsets/transactions) and ## 19 columns (items) and a density of 0.07206032 ## ## most frequent items: ## Hormonal.Contraceptives Smokes IUD ## 466 104 81 ## Schiller Biopsy (Other) ## 69 50 224 ## ## element (itemset/transaction) length distribution: ## sizes ## 0 1 2 3 4 5 6 7 ## 164 342 113 47 32 15 9 4 ## ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 1.000 1.000 1.369 2.000 7.000 ## ## includes extended item information - examples: ## labels variables levels ## 1 Smokes Smokes TRUE ## 2 Hormonal.Contraceptives Hormonal.Contraceptives TRUE ## 3 IUD IUD TRUE ## ## includes extended transaction information - examples: ## transactionID ## 1 1 ## 2 2 ## 3 3 inspect(head(transactions, 10)) ## items transactionID ## [1] {} 1 ## [2] {} 2 ## [3] {} 3 ## [4] {Smokes,Hormonal.Contraceptives,Dx.Cancer,Dx.HPV} 4 ## [5] {Hormonal.Contraceptives} 5 ## [6] {} 6 ## [7] {Smokes,IUD,Hinselmann,Schiller,Biopsy} 7 ## [8] {Hormonal.Contraceptives,IUD} 8 ## [9] {Dx.Cancer,Dx.HPV} 9 ## [10] {Hormonal.Contraceptives} 11 plot more frequent events itemFrequencyPlot(transactions, support = .05) applying Apriori rules &lt;- apriori(datacat_complete, parameter = list(supp = 0.01, conf = 0.1, target = &quot;rules&quot;)) ## Apriori ## ## Parameter specification: ## confidence minval smax arem aval originalSupport maxtime support minlen ## 0.1 0.1 1 none FALSE TRUE 5 0.01 1 ## maxlen target ext ## 10 rules FALSE ## ## Algorithmic control: ## filter tree heap memopt load sort verbose ## 0.1 TRUE TRUE FALSE TRUE 2 TRUE ## ## Absolute minimum support count: 7 ## ## set item appearances ...[0 item(s)] done [0.00s]. ## set transactions ...[19 item(s), 726 transaction(s)] done [0.00s]. ## sorting and recoding items ... [13 item(s)] done [0.00s]. ## creating transaction tree ... done [0.00s]. ## checking subsets of size 1 2 3 4 done [0.00s]. ## writing ... [110 rule(s)] done [0.00s]. ## creating S4 object ... done [0.00s]. summary(rules) ## set of 110 rules ## ## rule length distribution (lhs + rhs):sizes ## 1 2 3 4 ## 3 45 54 8 ## ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.000 2.000 3.000 2.609 3.000 4.000 ## ## summary of quality measures: ## support confidence lift count ## Min. :0.01102 Min. :0.1111 Min. : 0.8309 Min. : 8 ## 1st Qu.:0.01377 1st Qu.:0.2564 1st Qu.: 1.2595 1st Qu.: 10 ## Median :0.01791 Median :0.6283 Median : 3.6341 Median : 13 ## Mean :0.03168 Mean :0.5591 Mean : 7.1996 Mean : 23 ## 3rd Qu.:0.03168 3rd Qu.:0.7681 3rd Qu.:10.1200 3rd Qu.: 23 ## Max. :0.64187 Max. :1.0000 Max. :41.5938 Max. :466 ## ## mining info: ## data ntransactions support confidence ## datacat_complete 726 0.01 0.1 see the first 10 resulted rules ordered by lift and support inspect( head( rules, 10, by = c(&quot;lift&quot;, &quot;support&quot;) ) ) ## lhs rhs support confidence lift count ## [1] {Hormonal.Contraceptives, ## Dx.Cancer} =&gt; {Dx.HPV} 0.01515152 0.9166667 41.59375 11 ## [2] {Dx.HPV} =&gt; {Dx.Cancer} 0.02066116 0.9375000 40.03676 15 ## [3] {Dx.Cancer} =&gt; {Dx.HPV} 0.02066116 0.8823529 40.03676 15 ## [4] {Hormonal.Contraceptives, ## Dx.HPV} =&gt; {Dx.Cancer} 0.01515152 0.9166667 39.14706 11 ## [5] {Smokes, ## STDs.condylomatosis} =&gt; {STDs.vulvo.perineal.condylomatosis} 0.01377410 1.0000000 19.10526 10 ## [6] {STDs.condylomatosis, ## Schiller} =&gt; {STDs.vulvo.perineal.condylomatosis} 0.01377410 1.0000000 19.10526 10 ## [7] {STDs.vulvo.perineal.condylomatosis} =&gt; {STDs.condylomatosis} 0.05234160 1.0000000 18.61538 38 ## [8] {Hormonal.Contraceptives, ## STDs.vulvo.perineal.condylomatosis} =&gt; {STDs.condylomatosis} 0.03305785 1.0000000 18.61538 24 ## [9] {Smokes, ## STDs.vulvo.perineal.condylomatosis} =&gt; {STDs.condylomatosis} 0.01377410 1.0000000 18.61538 10 ## [10] {STDs.vulvo.perineal.condylomatosis, ## Schiller} =&gt; {STDs.condylomatosis} 0.01377410 1.0000000 18.61538 10 see the first 10 resulted rules ordered by support and lift inspect( head( subset(rules, subset = lift &gt; 1.1), 10, by = c(&quot;support&quot;, &quot;lift&quot;) ) ) ## lhs rhs support confidence lift count ## [1] {Biopsy} =&gt; {Schiller} 0.06060606 0.8800000 9.259130 44 ## [2] {Schiller} =&gt; {Biopsy} 0.06060606 0.6376812 9.259130 44 ## [3] {STDs.vulvo.perineal.condylomatosis} =&gt; {STDs.condylomatosis} 0.05234160 1.0000000 18.615385 38 ## [4] {STDs.condylomatosis} =&gt; {STDs.vulvo.perineal.condylomatosis} 0.05234160 0.9743590 18.615385 38 ## [5] {Schiller} =&gt; {Hinselmann} 0.04407713 0.4637681 10.202899 32 ## [6] {Hinselmann} =&gt; {Schiller} 0.04407713 0.9696970 10.202899 32 ## [7] {Hormonal.Contraceptives, ## Schiller} =&gt; {Biopsy} 0.03856749 0.6363636 9.240000 28 ## [8] {Hormonal.Contraceptives, ## Biopsy} =&gt; {Schiller} 0.03856749 0.8484848 8.927536 28 ## [9] {Hormonal.Contraceptives, ## STDs.vulvo.perineal.condylomatosis} =&gt; {STDs.condylomatosis} 0.03305785 1.0000000 18.615385 24 ## [10] {Hormonal.Contraceptives, ## STDs.condylomatosis} =&gt; {STDs.vulvo.perineal.condylomatosis} 0.03305785 0.9600000 18.341053 24 see the results for Dx.HPV and Dx.Cancer inspect( subset(rules, subset = rhs %in% c(&quot;Dx.HPV&quot;, &quot;Dx.Cancer&quot;) &amp; lift &gt; 1) ) ## lhs rhs support ## [1] {Dx.HPV} =&gt; {Dx.Cancer} 0.02066116 ## [2] {Dx.Cancer} =&gt; {Dx.HPV} 0.02066116 ## [3] {Hormonal.Contraceptives,Dx.HPV} =&gt; {Dx.Cancer} 0.01515152 ## [4] {Hormonal.Contraceptives,Dx.Cancer} =&gt; {Dx.HPV} 0.01515152 ## confidence lift count ## [1] 0.9375000 40.03676 15 ## [2] 0.8823529 40.03676 15 ## [3] 0.9166667 39.14706 11 ## [4] 0.9166667 41.59375 11 Visualize 15 results by lift and support values library(arulesViz) plot(head(rules, 15, by = c(&quot;lift&quot;, &quot;support&quot;))) graph plot(head(rules, 15, by = c(&quot;lift&quot;, &quot;support&quot;)), method=&quot;graph&quot;) plot parallel coordenates plot(head(rules, 15, by = c(&quot;lift&quot;, &quot;support&quot;)), method=&quot;paracoord&quot;, control=list(reorder=TRUE)) 4.10.1.2 K-means # selected only continuos features datacont&lt;-dataset %&gt;% select(!!continuous) # filter only complete cases datacont_complete&lt;-datacont[complete.cases(datacont), ] str(datacont_complete) ## &#39;data.frame&#39;: 668 obs. of 10 variables: ## $ Age : int 18 15 52 46 42 51 26 45 44 27 ... ## $ Number.of.sexual.partners : num 4 1 5 3 3 3 1 1 3 1 ... ## $ First.sexual.intercourse : num 15 14 16 21 23 17 26 20 26 17 ... ## $ Num.of.pregnancies : num 1 1 4 4 2 6 3 5 4 3 ... ## $ Smokes..years. : num 0 0 37 0 0 34 0 0 0 0 ... ## $ Smokes..packs.year. : num 0 0 37 0 0 3.4 0 0 0 0 ... ## $ Hormonal.Contraceptives..years.: num 0 0 3 15 0 0 2 0 2 8 ... ## $ IUD..years. : num 0 0 0 0 0 7 7 0 0 0 ... ## $ STDs..number. : num 0 0 0 0 0 0 0 0 0 0 ... ## $ STDs..Number.of.diagnosis : int 0 0 0 0 0 0 0 0 0 0 ... Determine number of clusters within groups sum of squares wss &lt;- (nrow(datacont_complete)-1)*sum(apply(datacont_complete,2,var)) for (i in 2:15) wss[i] &lt;- sum(kmeans(datacont_complete, centers=i)$withinss) A plot of the within groups sum of squares by number of clusters extracted plot(1:15, wss, type=&quot;b&quot;, xlab=&quot;Number of Clusters&quot;, ylab=&quot;Within groups sum of squares&quot;) abline(v = 3, col=&quot;red&quot;, lwd=1.5, lty=2) K-Means Cluster Analysis fit3 &lt;- kmeans(datacont_complete, 3) # 3 cluster solution compactness of the clustering (between_SS / total_SS) fit3$betweenss / fit3$totss * 100 ## [1] 48.70424 get cluster means aggregate(datacont_complete,by=list(fit3$cluster),FUN=mean) ## Group.1 Age Number.of.sexual.partners First.sexual.intercourse ## 1 1 20.28797 2.351266 16.00949 ## 2 2 42.66667 2.655172 18.47126 ## 3 3 30.52830 2.686792 18.05660 ## Num.of.pregnancies Smokes..years. Smokes..packs.year. ## 1 1.642405 0.570680 0.2395741 ## 2 3.770115 3.856712 1.5365104 ## 3 2.660377 1.167777 0.3667880 ## Hormonal.Contraceptives..years. IUD..years. STDs..number. ## 1 1.156772 0.1170886 0.1740506 ## 2 5.645402 1.3188506 0.2183908 ## 3 2.539828 0.7634717 0.1396226 ## STDs..Number.of.diagnosis ## 1 0.09177215 ## 2 0.11494253 ## 3 0.08679245 # append cluster assignment datacont_complete &lt;- data.frame(datacont_complete, fit3$cluster) plot clusters for plot(datacont_complete$Age, datacont_complete$Number.of.sexual.partners , col = fit3$cluster) visualize clusters library(factoextra) fviz_cluster(fit3, data = datacont_complete, palette = &quot;jco&quot;, ggtheme = theme_minimal(), main = &quot;Partitioning Clustering Plot&quot; ) Compute hierarchical k-means clustering res.hk &lt;-hkmeans(datacont_complete, 3) # Elements returned by hkmeans() names(res.hk) ## [1] &quot;cluster&quot; &quot;centers&quot; &quot;totss&quot; &quot;withinss&quot; ## [5] &quot;tot.withinss&quot; &quot;betweenss&quot; &quot;size&quot; &quot;iter&quot; ## [9] &quot;ifault&quot; &quot;data&quot; &quot;hclust&quot; Visualize the tree fviz_dend(res.hk, cex = 0.6, palette = &quot;jco&quot;, rect = TRUE, rect_border = &quot;jco&quot;, rect_fill = TRUE) alternative hierarchical clustering res.hc &lt;- hclust(dist(datacont_complete), method = &quot;ward.D2&quot;) # plot the dendogram fviz_dend(res.hc, cex = 0.5, k = 3, palette = &quot;jco&quot;) References http://www.rdatamining.com/examples/association-rules https://blog.aptitive.com/building-the-transactions-class-for-association-rule-mining-in-r-using-arules-and-apriori-c6be64268bc4 https://rpubs.com/lingyanzhou/examples-association-rules https://www.statmethods.net/advstats/cluster.html https://towardsdatascience.com/clustering-analysis-in-r-using-k-means-73eca4fb7967 https://rpubs.com/JanpuHou/278558 "]
]
