[
["lesson-3.html", "2.5 Lesson 3", " 2.5 Lesson 3 2020-02-17 Classe Exercises (almost all code given by the professor) knitr::opts_chunk$set(echo = TRUE, warning = F, message = F) 2.5.1 Kernel density estimation data(faithful) hist(faithful$waiting, density = 10, main=&quot;wainting time to next eruption&quot;, xlab=&quot;minutes&quot;, freq=F) lines(density(faithful$waiting),lwd=2,col=4) lines(density(faithful$waiting, bw = 5),lwd=2,col=5) # defining a banwith = 5 in density function lines(density(faithful$waiting, bw = 10),lwd=2,col=6) # defining a banwith = 10 in density function 2.5.2 Conditional density With data from Coimbra Breast Cancer (Glucose | Classification) breast&lt;-read.csv(&quot;2.UploadedData/dataR2.csv&quot;) hist(breast$Glucose, density = 10, main=&quot;Glucose level&quot;, xlab=&quot;&quot;, freq=F, ylim = c(0,0.05)) lines(density(breast$Glucose), lwd=2,col=&quot;black&quot;) lines(density(subset(breast,Classification == 1)$Glucose), lwd=2,col=&quot;green&quot;) lines(density(subset(breast,Classification == 2)$Glucose), lwd=2,col=&quot;red&quot;) legend(130,0.03, legend=c(&quot;P(Glucose)&quot;,&quot;P(Glucose|Control)&quot;,&quot;P(Glucose|Patient)&quot;), col=c(&quot;black&quot;,&quot;green&quot;,&quot;red&quot;), lty = 1, cex = 0.8 ) 2.5.3 Expectation Maximization for the two latent variables Example with Age distribution in the breast cancer data set # read data breast&lt;-read.csv(&quot;2.UploadedData/dataR2.csv&quot;) # Expectation Maximization for the two latent variables (clusters) m&lt;-2 # the total number of clusters (m) set.seed(0) param.mean&lt;-sample(breast$Age,m) # initial parameters param.sd&lt;-rep(sd(breast$Age)/m,m) # initial parameters # E-step (Expectation): that estimates the probability of each point belonging to each cluster xx&lt;-breast$Age ## definition of M-step method alternative &lt;- 1 ## iteraction process itera &lt;-10 # maximum number of iterations eps&lt;-0.01 # minimum error to convergence for (k in 1:itera) { densities&lt;-sapply(1:m, function(i){dnorm(xx, mean=param.mean[i], sd=param.sd[i])}) relevance&lt;-t(apply(densities,1,function(l){l/sum(l)})) attrib&lt;-t(apply(relevance,1, function(l){replace(rep(0,m),which.max(l)[1],1)})) # Re-estimates the parameters of the probability distribution of each class if (alternative == 1) { ## M-step (alternative 1: crisp) param.mean.new&lt;-sapply(1:m, function(j){mean(breast$Age[attrib[,j]==1])}) param.sd.new&lt;-sapply(1:m, function(j){sqrt(sum(relevance[,j]*(breast$Age-param.mean[j])^2)/sum(relevance[,j]))}) } else { ## M-step (alternative 2: soft) param.mean.new&lt;-sapply(1:m, function(j){sum(breast$Age*relevance[,j])/sum(relevance[,j])}) param.sd.new&lt;-sapply(1:m, function(j){sqrt(sum(relevance[,j]*(breast$Age-param.mean[j])^2)/sum(relevance[,j]))}) } # convergence the maximum number of iterations (k). cat(&quot;iteration&quot;, itera, &quot;evolution:&quot;, dif&lt;-sum(abs(param.mean.new - param.mean)), &quot;\\n&quot;) if(dif &lt; eps) break # the accepted error to converge (e) param.mean&lt;-param.mean.new param.sd&lt;-param.sd.new } ## iteration 10 evolution: 13.44278 ## iteration 10 evolution: 9.497791 ## iteration 10 evolution: 4.21416 ## iteration 10 evolution: 0.4824254 ## iteration 10 evolution: 0.4839737 ## iteration 10 evolution: 0 Print the two new density lines with a large banwith # plot histogram and density function for Age hist(breast$Age, density = 20, main=&quot;Glucose level&quot;, xlab=&quot;&quot;, freq=F, ylim = c(0,0.03)) lines(density(breast$Age), lwd=2,col=&quot;black&quot;) set.seed(0) lines(density(rnorm(100, param.mean[1], param.sd[1]), bw = 12),lwd=2,col=5) lines(density(rnorm(100, param.mean[2], param.sd[2]), bw = 12),lwd=2,col=4) 2.5.4 Data Generation Comparing the distribution from data generated from 3 different ways ## length of data set generation n&lt;-100 # original sample data set sample&lt;-breast$Age # bootstrapped sample data set sample.obs&lt;-sample(breast$Age, size=n, replace = TRUE) # gaussian generated data set sample.simple&lt;-rnorm(n,mean=mean(breast$Age), sd=sd(breast$Age)) # EM model generated data set classes&lt;-apply(attrib, 1, which.max) # using attrib define previously, to calculate the number of observations in each class class.prop&lt;-prop.table(table(classes)) # calculate percentage of each class set.seed(523) sample.classes&lt;-sample(1:m, size=n, replace=TRUE, prob=class.prop) sample.prop&lt;-prop.table(table(sample.classes)) sample.values&lt;-round(unlist(sapply(1:m, function(j){ rnorm(n*sample.prop[j], # generating number with the proportions of the two classes we identified previously mean=param.mean[j], # parameters defined previously sd=param.sd[j]) # parameters defined previously })),0) Printing the distribution of the 4 data samples par(mfrow=c(2,2)) hist(breast$Age, freq = F, main = &quot;Observed data&quot;) lines(density(breast$Age)) hist(sample.obs, freq = F, main = &quot;data points sampled from observed data&quot;) lines(density(sample.obs)) hist(sample.simple, freq = F, main = &quot;data points generated from sample distribution&quot;) lines(density(sample.simple)) hist(sample.values, freq = F, main = &quot;data points generated from EM (m=2)&quot;) lines(density(sample.values)) "]
]
